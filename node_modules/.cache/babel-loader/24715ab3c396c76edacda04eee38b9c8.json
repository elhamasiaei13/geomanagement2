{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\nimport { QueryClient, QueryClientProvider, useMutation, useQuery, useQueryClient } from 'react-query'; // import { message } from 'antd';\n\nimport { Message, message } from '../Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CountriesForm(props) {\n  _s();\n\n  const [form] = PrvnUseForm();\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  const [visibleMessage, setVisibleMessage] = useState(true);\n  const [contentMessage, setContentMessage] = useState(undefined);\n  useEffect(async () => {\n    if (props.edit) {\n      onFill();\n    }\n  }, []);\n  useEffect(async () => {}, [visibleMessage]);\n  const id = props.location.state && props.location.state.id;\n\n  const onFinish = async values => {\n    console.log('values :>> ', values);\n    console.log('init :>> ', initialValues);\n\n    if (props.edit == true) {\n      await geomanagementApi.put(`/countries/${id}`, values).then(res => {\n        setContentMessage({\n          message: \"باموفقیت انجام شد\",\n          status: \"200\"\n        });\n        setVisibleMessage(true);\n      }).catch(err => {\n        setContentMessage({\n          message: err.message,\n          status: \"err\"\n        });\n        setVisibleMessage(true);\n      }).finally(() => {\n        setTimeout(() => {\n          setContentMessage(undefined);\n          setVisibleMessage(false);\n        }, 5000);\n      });\n    } else {\n      await geomanagementApi.post(`/countries`, values).then(res => {\n        setContentMessage({\n          message: \"باموفقیت انجام شد\",\n          status: \"200\"\n        });\n        setVisibleMessage(true);\n      }).catch(err => {\n        setContentMessage({\n          message: err.message,\n          status: \"err\"\n        });\n        setVisibleMessage(true);\n      }).finally(() => {\n        setTimeout(() => {\n          setContentMessage(undefined);\n          setVisibleMessage(false);\n        }, 5000);\n      });\n    }\n  };\n\n  const onFill = () => {\n    console.log('props.initialValues :>> ', props.initialValues); // const id = props.location.state && props.location.state.id\n\n    geomanagementApi.get(\"/countries/\" + id).then(response => {\n      form.setFieldsValue(response.data.data);\n    });\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n  const queryClient = useQueryClient(); // const mutation = useMutation(onFinish, {\n  //     onSuccess: () => {\n  //         // Invalidate and refetch\n  //         queryClient.invalidateQueries('todos')\n  //     },\n  // })\n  // const { status, data, error, refetch } = useQuery(\"myKey\", onFinish);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setContentMessage({\n          message: \"باموفقیت انجام شد\",\n          status: \"200\"\n        });\n        setVisibleMessage(true);\n      },\n      children: \" onclick\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setVisibleMessage(false),\n      children: \" false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), visibleMessage && /*#__PURE__*/_jsxDEV(Message, {\n      visible: true,\n      message: contentMessage && contentMessage.message,\n      dealay: \"5000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PrvnForm, {\n      form: form,\n      name: \"control-hooks\" // initialValues={initialValues}\n      // validateMessages={validateMessages}\n      ,\n      onFinish: onFinish,\n      children: [/*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"shortCode\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"shortCode\",\n        label: translator(\"shortCode\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"otherName\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"otherName\",\n        label: translator(\"otherName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"otherName\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"enName\",\n        label: translator(\"enName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"localName\",\n        label: translator(\"localName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n        children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n          htmlType: \"Prvnbutton\",\n          onClick: onReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CountriesForm, \"W4uZUF+2Nk1PxZQoA/gDlKH3yCQ=\", false, function () {\n  return [useQueryClient];\n});\n\n_c = CountriesForm;\nexport default _c2 = withRouter(CountriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js"],"names":["Formik","Form","Field","React","useEffect","useState","withRouter","toast","Yup","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnUseForm","geomanagementApi","translator","CommonField","QueryClient","QueryClientProvider","useMutation","useQuery","useQueryClient","Message","message","CountriesForm","props","form","initialValues","setInitialValues","count","seCount","visibleMessage","setVisibleMessage","contentMessage","setContentMessage","undefined","edit","onFill","id","location","state","onFinish","values","console","log","put","then","res","status","catch","err","finally","setTimeout","post","get","response","setFieldsValue","data","onReset","resetFields","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","queryClient","min"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\nimport { QueryClient, QueryClientProvider, useMutation, useQuery, useQueryClient } from 'react-query';\n// import { message } from 'antd';\nimport { Message, message } from '../Message';\n\nfunction CountriesForm(props) {\n    const [form] = PrvnUseForm()\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n    const [visibleMessage, setVisibleMessage] = useState(true)\n    const [contentMessage, setContentMessage] = useState(undefined)\n\n    useEffect(async () => {\n        if (props.edit) {\n            onFill()\n        }\n    }, [])\n    useEffect(async () => {\n    }, [visibleMessage])\n\n    const id = props.location.state && props.location.state.id\n\n\n    const onFinish = async (values) => {\n        console.log('values :>> ', values);\n        console.log('init :>> ', initialValues);\n        if (props.edit == true) {\n            await geomanagementApi.put(`/countries/${id}`, values).then((res) => {\n                setContentMessage({ message: \"باموفقیت انجام شد\", status: \"200\" })\n                setVisibleMessage(true)\n\n            }).catch(err => {\n                setContentMessage({ message: err.message, status: \"err\" })\n                setVisibleMessage(true)\n            })\n                .finally(() => {\n                    setTimeout(() => {\n                        setContentMessage(undefined)\n                        setVisibleMessage(false)\n                    }, 5000);\n                })\n        } else {\n            await geomanagementApi.post(`/countries`, values).then((res) => {\n                setContentMessage({ message: \"باموفقیت انجام شد\", status: \"200\" })\n                setVisibleMessage(true)\n            }).catch(err => {\n                setContentMessage({ message: err.message, status: \"err\" })\n                setVisibleMessage(true)\n            }).finally(() => {\n                setTimeout(() => {\n                    setContentMessage(undefined)\n                    setVisibleMessage(false)\n                }, 5000);\n            })\n        }\n    }\n\n    const onFill = () => {\n        console.log('props.initialValues :>> ', props.initialValues);\n        // const id = props.location.state && props.location.state.id\n        geomanagementApi.get(\"/countries/\" + id).then((response) => {\n            form.setFieldsValue(response.data.data)\n        })\n\n    };\n    const onReset = () => {\n        form.resetFields();\n    };\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const queryClient = useQueryClient()\n\n\n\n    // const mutation = useMutation(onFinish, {\n    //     onSuccess: () => {\n    //         // Invalidate and refetch\n    //         queryClient.invalidateQueries('todos')\n    //     },\n    // })\n\n\n    // const { status, data, error, refetch } = useQuery(\"myKey\", onFinish);\n\n\n\n\n    return (\n        <>\n            <button onClick={() => {\n                setContentMessage({ message: \"باموفقیت انجام شد\", status: \"200\" })\n                setVisibleMessage(true)\n            }} > onclick</button>\n            <button onClick={() => setVisibleMessage(false)} > false</button>\n\n            {visibleMessage &&\n                <Message visible={true}\n                    message={contentMessage && contentMessage.message}\n                    dealay=\"5000\"></Message>\n            }\n\n\n            <PrvnForm\n                form={form}\n                name=\"control-hooks\"\n                // initialValues={initialValues}\n                // validateMessages={validateMessages}\n                onFinish={onFinish}>\n\n\n\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"shortCode\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"shortCode\"\n                    label={translator(\"shortCode\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"otherName\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"otherName\"\n                    label={translator(\"otherName\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"otherName\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"enName\"\n                    label={translator(\"enName\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"localName\"\n                    label={translator(\"localName\")}\n                />\n\n                <PrvnFormItem >\n\n                    <PrvnButton type=\"primary\" htmlType=\"submit\">\n                        Submit\n                 </PrvnButton>\n\n                    <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                        Reset\n            </PrvnButton>\n\n                </PrvnFormItem>\n            </PrvnForm >\n        </>\n\n    );\n}\n\nexport default withRouter(CountriesForm);"]},"metadata":{},"sourceType":"module"}