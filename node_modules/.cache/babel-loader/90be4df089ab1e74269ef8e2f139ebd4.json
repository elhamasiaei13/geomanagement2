{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js\",\n    _s = $RefreshSig$();\n\nimport { getDefaultNormalizer } from '@testing-library/react';\nimport { Formik, Field, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../service/api';\nimport translator from '../Translator/translator';\nimport CommonField from './CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WrapperForm(props) {\n  _s();\n\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  console.log('props :>> ', props);\n  useEffect(async () => {\n    if (props.edit) {\n      const id = props.location.state && props.location.state.id;\n      geomanagementApi.get(\"/countries/\" + id).then(res => {\n        console.log('res.data.data :>> ', res.data.data);\n        setInitialValues(res.data.data);\n      });\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const submitHandler = (values, actions) => {};\n\n  const submit = async values => {\n    if (props.edit = true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    } else {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log('props  countries >> ', props), /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      initialValues: initialValues,\n      onSubmit: submit,\n      enableReinitialize: true,\n      children: ({\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(CommonField, {\n          errors: errors,\n          handlers: {\n            errors: errors,\n            touched: touched\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WrapperForm, \"KBY71AgJEE6onhJmrYTSshyGgzM=\");\n\n_c = WrapperForm;\nexport default _c2 = withRouter(WrapperForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WrapperForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js"],"names":["getDefaultNormalizer","Formik","Field","Form","React","useEffect","useState","withRouter","Yup","geomanagementApi","translator","CommonField","WrapperForm","props","initialValues","setInitialValues","count","seCount","console","log","edit","id","location","state","get","then","res","data","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","submitHandler","values","actions","submit","put","alert","catch","err","errors","touched"],"mappings":"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","sourcesContent":["import { getDefaultNormalizer } from '@testing-library/react';\nimport { Formik, Field, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../service/api';\nimport translator from '../Translator/translator';\nimport CommonField from './CommonField';\n\nfunction WrapperForm(props) {\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n\n    console.log('props :>> ', props);\n\n    useEffect(async () => {\n        if (props.edit) {\n            const id = props.location.state && props.location.state.id\n            geomanagementApi.get(\"/countries/\" + id).then((res) => {\n                console.log('res.data.data :>> ', res.data.data);\n                setInitialValues(res.data.data)\n            })\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const submitHandler = (values, actions) => {\n\n    }\n\n    const submit = async (values) => {\n        if (props.edit = true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        } else {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        }\n\n    }\n\n    return (\n        <div>\n            {console.log('props  countries >> ', props)}\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={initialValues}\n                onSubmit={submit}\n                enableReinitialize\n            >\n                {({ errors, touched }) => (\n                    <Form>\n                        <CommonField errors={errors} handlers = {{ errors: errors, touched: touched }} />\n                        {/* <label htmlFor=\"enName\">enName <span> *</span></label>\n                        <Field\n                            id=\"enName\"\n                            name=\"enName\" />\n                        {errors.enName && touched.enName ? (<div>{errors.enName}</div>) : null}\n\n                        <label htmlFor=\"localName\">localName  <span> *</span></label>\n                        <Field\n\n                            id=\"localName\"\n                            name=\"localName\" />\n                        <label htmlFor=\"otherName\">otherName  <span> *</span></label>\n                        <Field\n\n                            id=\"otherName\"\n                            name=\"otherName\" />\n                        <label htmlFor=\"shortCode\">shortCode  <span> *</span></label>\n                        <Field\n                            id=\"shortCode\"\n                            name=\"shortCode\" /> */}\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n        </div >\n    );\n}\n\nexport default withRouter(WrapperForm);"]},"metadata":{},"sourceType":"module"}