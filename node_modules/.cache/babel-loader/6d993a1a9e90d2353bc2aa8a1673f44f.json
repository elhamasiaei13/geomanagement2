{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountriesForm(props) {\n  _s();\n\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      const id = props.location.state && props.location.state.id;\n      geomanagementApi.get(\"/countries/\" + id).then(response => {\n        const res = response.data.data;\n        const preData = {\n          \"enName\": res.enName,\n          localName: res.data,\n          otherName: res.data,\n          shortCode: res.data\n        };\n        setInitialValues(preData); // setInitialValues(response.data.data)\n      });\n    }\n  }, [initialValues]);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const submit = async values => {\n    if (props.edit == true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res.data);\n      }).catch(err => alert(err));\n    } else {\n      await geomanagementApi.post(`/countries`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res);\n      }).catch(err => alert(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      initialValues: initialValues,\n      onSubmit: submit,\n      enableReinitialize: true,\n      children: ({\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"enName\",\n          children: \"enName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"enName\",\n          name: \"enName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), errors.enName && touched.enName ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.enName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 61\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"localName\",\n          children: \"localName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"localName\",\n          name: \"localName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), errors.localName && touched.localName ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.localName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 67\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"otherName\",\n          children: \"otherName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"otherName\",\n          name: \"otherName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), errors.otherName && touched.otherName ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.otherName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 67\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"shortCode\",\n          children: \"shortCode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"shortCode\",\n          name: \"shortCode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), errors.shortCode && touched.shortCode ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.shortCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 67\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountriesForm, \"KBY71AgJEE6onhJmrYTSshyGgzM=\");\n\n_c = CountriesForm;\nexport default _c2 = withRouter(CountriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js"],"names":["Formik","Form","Field","React","useEffect","useState","withRouter","Yup","geomanagementApi","CommonField","CountriesForm","props","initialValues","setInitialValues","count","seCount","edit","id","location","state","get","then","response","res","data","preData","enName","localName","otherName","shortCode","validationSchema","object","shape","string","required","submit","values","put","history","push","alert","catch","err","post","errors","touched"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\n\nfunction CountriesForm(props) {\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n\n    useEffect(async () => {\n        if (props.edit) {\n            const id = props.location.state && props.location.state.id\n            geomanagementApi.get(\"/countries/\" + id).then((response) => {\n                const res = response.data.data\n                const preData = {\n                    \"enName\": res.enName,\n                    localName: res.data,\n                    otherName: res.data,\n                    shortCode: res.data,\n                }\n                setInitialValues(preData)\n                // setInitialValues(response.data.data)\n            })\n        }\n    }, [initialValues])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const submit = async (values) => {\n        if (props.edit == true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res.data)\n            }).catch(err => alert(err))\n        } else {\n            await geomanagementApi.post(`/countries`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res)\n            }).catch(err => alert(err))\n        }\n    }\n\n    return (\n        <div>\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={initialValues}\n                onSubmit={submit}\n                enableReinitialize\n            >\n                {({ errors, touched }) => (\n                    <Form>\n                        <label htmlFor=\"enName\">enName</label>\n                        <Field id=\"enName\" name=\"enName\" />\n                        {errors.enName && touched.enName ? (<div>{errors.enName}</div>) : null}\n\n                        <label htmlFor=\"localName\">localName</label>\n                        <Field id=\"localName\" name=\"localName\" />\n                        {errors.localName && touched.localName ? (<div>{errors.localName}</div>) : null}\n\n                        <label htmlFor=\"otherName\">otherName</label>\n                        <Field id=\"otherName\" name=\"otherName\" />\n                        {errors.otherName && touched.otherName ? (<div>{errors.otherName}</div>) : null}\n\n                        <label htmlFor=\"shortCode\">shortCode</label>\n                        <Field id=\"shortCode\" name=\"shortCode\" />\n                        {errors.shortCode && touched.shortCode ? (<div>{errors.shortCode}</div>) : null}\n\n                        {/* <CommonField\n                            errors={errors}\n                            touched={touched}\n                        /> */}\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n        </div >\n    );\n}\n\nexport default withRouter(CountriesForm);"]},"metadata":{},"sourceType":"module"}