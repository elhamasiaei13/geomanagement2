{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js\";\nimport { Formik, Field, FieldArray } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport translator from '../Translator/translator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WrapperForm(props) {\n  const initialValues = {};\n  const validationSchema = Yup.object().shape({\n    personUuid: Yup.string().required()\n  });\n\n  const submitHandler = (values, actions) => {\n    console.log('values :>> ', values);\n    console.log('actions :>> ', actions);\n  };\n\n  helpValue = (isTouched, hasErr) => {\n    return isTouched && hasErr;\n  };\n\n  validateStatus = (isTouched, hasErr) => {\n    return isTouched && hasErr ? 'error' : '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues // validationSchema={validationSchema}\n      ,\n      onSubmit: submitHandler,\n      children: ({\n        errors,\n        touched,\n        handleSubmit,\n        isSubmitting,\n        values,\n        handleReset,\n        handleBlur\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        onFinish: handleSubmit,\n        className: \"prvn-form\",\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          hasFeedback: true,\n          label: translator(\"Address\"),\n          required: true // help={thelpValue(touched.address, errors.address)}\n          // validateStatus={validateStatus(touched.address, errors.address)} \n          ,\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"address\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(\"input\", {\n              tabIndex: \"4\",\n              rows: 4,\n              maxLength: 339\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_c = WrapperForm;\nexport default WrapperForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"WrapperForm\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js"],"names":["Formik","Field","FieldArray","React","Yup","translator","WrapperForm","props","initialValues","validationSchema","object","shape","personUuid","string","required","submitHandler","values","actions","console","log","helpValue","isTouched","hasErr","validateStatus","errors","touched","handleSubmit","isSubmitting","handleReset","handleBlur","field"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,QAA0C,QAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,gBAAgB,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,UAAU,EAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb;AAD4B,GAAnB,CAAzB;;AAIA,QAAMC,aAAa,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAA3B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,OAA5B;AACH,GAHD;;AAKAG,EAAAA,SAAS,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAC/B,WAAOD,SAAS,IAAIC,MAApB;AACH,GAFD;;AAGAC,EAAAA,cAAc,GAAG,CAACF,SAAD,EAAYC,MAAZ,KAAuB;AACpC,WAAOD,SAAS,IAAIC,MAAb,GAAsB,OAAtB,GAAgC,EAAvC;AACH,GAFD;;AAIA,sBACI;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,aAAa,EAAEd,aADnB,CAEI;AAFJ;AAGI,MAAA,QAAQ,EAAEO,aAHd;AAAA,gBAIK,CAAC;AAAES,QAAAA,MAAF;AAAUC,QAAAA,OAAV;AAAmBC,QAAAA,YAAnB;AAAiCC,QAAAA,YAAjC;AAA+CX,QAAAA,MAA/C;AAAuDY,QAAAA,WAAvD;AAAoEC,QAAAA;AAApE,OAAD,kBACG,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEH,YAAhB;AAA8B,QAAA,SAAS,EAAC,WAAxC;AAAA,+BAEI,QAAC,IAAD,CAAM,IAAN;AACI,UAAA,WAAW,MADf;AAEI,UAAA,KAAK,EAAErB,UAAU,CAAC,SAAD,CAFrB;AAGI,UAAA,QAAQ,MAHZ,CAIA;AACA;AALA;AAAA,iCAOI,QAAC,KAAD;AAEI,YAAA,IAAI,EAAC,SAFT;AAGI,YAAA,MAAM,EAAE,CAAC;AAAEyB,cAAAA;AAAF,aAAD,kBAAe;AAAO,cAAA,QAAQ,EAAC,GAAhB;AAAoB,cAAA,IAAI,EAAE,CAA1B;AAA6B,cAAA,SAAS,EAAE;AAAxC;AAAA;AAAA;AAAA;AAAA;AAH3B;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AALR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH;;KA9CQxB,W;AAgDT,eAAeA,WAAf","sourcesContent":["import { Formik, Field, FieldArray } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport translator from '../Translator/translator';\n\nfunction WrapperForm(props) {\n    const initialValues = {}\n    const validationSchema = Yup.object().shape({\n        personUuid: Yup.string().required(),\n\n    });\n    const submitHandler = (values, actions) => {\n        console.log('values :>> ', values);\n        console.log('actions :>> ', actions);\n    }\n\n    helpValue = (isTouched, hasErr) => {\n        return isTouched && hasErr\n    }\n    validateStatus = (isTouched, hasErr) => {\n        return isTouched && hasErr ? 'error' : ''\n    }\n\n    return (\n        <div>\n            <Formik\n                initialValues={initialValues}\n                // validationSchema={validationSchema}\n                onSubmit={submitHandler} >\n                {({ errors, touched, handleSubmit, isSubmitting, values, handleReset, handleBlur }) => (\n                    <Form onFinish={handleSubmit} className=\"prvn-form\">\n\n                        <Form.Item\n                            hasFeedback\n                            label={translator(\"Address\")}\n                            required\n                        // help={thelpValue(touched.address, errors.address)}\n                        // validateStatus={validateStatus(touched.address, errors.address)} \n                        >\n                            <Field\n\n                                name=\"address\"\n                                render={({ field }) => <input tabIndex=\"4\" rows={4} maxLength={339} />} />\n                        </Form.Item>\n\n\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default WrapperForm;"]},"metadata":{},"sourceType":"module"}