{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/Cities.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Table from '../Teble';\n\nimport PrvnTable from '../PrvnTable';\nimport Table from '../Teble';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport translator from '../../Translator/translator';\nimport DeleteModal from '../DeleteModal';\nimport { geomanagementApi } from '../../service/api';\nimport { PrvnInput, PrvnUseForm } from '../PrvnComponents';\nimport { toast } from 'react-toastify';\nimport SearchForm from './SearchForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Cities(props) {\n  _s();\n\n  const [dataSource, setDataSource] = useState([]);\n  const [name, setName] = useState(undefined);\n  console.log('props.history :>> ', props.history);\n  useEffect(() => {\n    getData();\n  }, [name]);\n\n  const getData = async () => {\n    const params = {\n      name: name\n    };\n\n    try {\n      const res = await geomanagementApi.get(\"/cities\", {\n        params: params\n      });\n      setDataSource(res.data.data);\n    } catch (error) {\n      setDataSource([]);\n      console.log('getData :>> ', error);\n    }\n  };\n\n  const reset = event => {\n    event.preventDefault();\n    setName(\"\");\n    setDataSource([]);\n  };\n\n  const columns = [{\n    title: translator('nameLocal'),\n    dataIndex: 'localName',\n    key: '1'\n  }, {\n    title: translator('otherNames'),\n    dataIndex: 'otherNames',\n    key: '2'\n  }, {\n    title: translator('nameEn'),\n    dataIndex: 'nameEn',\n    translator,\n    key: '3'\n  }, {\n    title: translator('createTime'),\n    dataIndex: 'createTime',\n    key: '4'\n  }, {\n    title: translator('Action'),\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: {\n          pathname: `/cities/${record.id}/edit`,\n          state: {\n            id: record.id\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, {\n    title: 'deleted',\n    dataIndex: 'deleted',\n    key: 'deleted',\n    render: (text, record) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(DeleteModal, {\n          id: record.id,\n          record: record,\n          type: \"cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false);\n    }\n  }];\n\n  const mySubmitHandler = event => {\n    event.preventDefault();\n    console.log('name :>> ', name);\n    getData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [translator(\"cities\"), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/cities/new\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: [\" \", translator(\"create new cities\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      onChange: e => {\n        setName(e.target.value);\n      },\n      value: name,\n      mySubmitHandler: mySubmitHandler,\n      reset: reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnTable, {\n      dataSource: dataSource,\n      columns: columns,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cities, \"RroFumiZDTbJJc9l9YASO1vl/hg=\");\n\n_c = Cities;\nexport default Cities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cities\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/Cities.js"],"names":["React","useEffect","useState","PrvnTable","Table","EditOutlined","Link","translator","DeleteModal","geomanagementApi","PrvnInput","PrvnUseForm","toast","SearchForm","Cities","props","dataSource","setDataSource","name","setName","undefined","console","log","history","getData","params","res","get","data","error","reset","event","preventDefault","columns","title","dataIndex","key","render","text","record","pathname","id","state","mySubmitHandler","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Table from '../Teble';\n\nimport PrvnTable from '../PrvnTable';\nimport Table from '../Teble';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport translator from '../../Translator/translator';\nimport DeleteModal from '../DeleteModal';\nimport { geomanagementApi } from '../../service/api';\nimport { PrvnInput, PrvnUseForm } from '../PrvnComponents';\nimport { toast } from 'react-toastify';\nimport SearchForm from './SearchForm';\n\nfunction Cities(props) {\n    const [dataSource, setDataSource] = useState([])\n    const [name, setName] = useState(undefined)\n\n    console.log('props.history :>> ', props.history);\n\n    useEffect(() => {\n        getData()\n    }, [name])\n\n    const getData = async () => {\n        const params = { name: name }\n        try {\n            const res = await geomanagementApi.get(\"/cities\", { params: params })\n            setDataSource(res.data.data)\n        } catch (error) {\n            setDataSource([])\n            console.log('getData :>> ', error);\n        }\n    }\n    const reset = (event) => {\n        event.preventDefault();\n        setName(\"\")\n        setDataSource([])\n\n    }\n\n\n    const columns = [{\n        title: translator('nameLocal'),\n        dataIndex: 'localName',\n        key: '1',\n    },\n    {\n        title: translator('otherNames'),\n        dataIndex: 'otherNames',\n        key: '2',\n    },\n    {\n        title: translator('nameEn'),\n        dataIndex: 'nameEn', translator,\n        key: '3',\n    },\n    {\n        title: translator('createTime'),\n        dataIndex: 'createTime',\n        key: '4',\n    },\n    {\n        title: translator('Action'),\n        key: 'action',\n        render: (text, record) => (\n            <>\n                <Link\n                    to={{\n                        pathname: `/cities/${record.id}/edit`,\n                        state: { id: record.id }\n                    }}\n                >\n                    <EditOutlined />\n                </Link>\n            </>\n        ),\n    },\n    {\n        title: 'deleted',\n        dataIndex: 'deleted',\n        key: 'deleted',\n        render: (text, record) => {\n            return <>\n                <DeleteModal id={record.id} record={record} type={\"cities\"} />\n            </>\n        }\n    },\n    ]\n    const mySubmitHandler = (event) => {\n        event.preventDefault()\n        console.log('name :>> ', name);\n        getData()\n    }\n\n    return (\n        <div>\n            <h2>{translator(\"cities\")}\n                <Link to=\"/cities/new\"><button> {translator(\"create new cities\")}</button></Link></h2>\n\n            <SearchForm\n                onChange={(e) => {\n                    setName(e.target.value)\n                }} value={name}\n                mySubmitHandler={mySubmitHandler}\n                reset={reset}\n            />\n            <PrvnTable\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            >\n            </PrvnTable>\n        </div>\n    );\n}\n\nexport default Cities;"]},"metadata":{},"sourceType":"module"}