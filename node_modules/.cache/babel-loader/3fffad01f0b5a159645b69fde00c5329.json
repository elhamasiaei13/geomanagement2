{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CitiesForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport translator from '../../Translator/translator';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nfunction CitiesForm(props) {\n  _s();\n\n  const [initialValues, setInitialValues] = useState({});\n  const [countries, setCountries] = useState([]); // const [data, setCountries] = useState(false);\n\n  const [countrieLoading, setCountriesLoading] = useState(false);\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      const id = props.location.state && props.location.state.id;\n      geomanagementApi.get(\"/cities/\" + id).then(res => {\n        console.log('res.data.data :>> ', res.data.data);\n        setInitialValues(res.data.data);\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const submit = async values => {\n    console.log('values :>> ', values);\n\n    if (props.edit == true) {\n      await geomanagementApi.put(`/cities/${values.id}`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    } else {\n      await geomanagementApi.post(`/cities`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    }\n  };\n\n  const getcountries = async value => {\n    console.log('value :>> ', value);\n    const params = {\n      name: value\n    };\n    geomanagementApi.get(`/provinces`, {\n      params: params\n    }).then(res => {\n      if (res.data.data) {\n        setCountries(res.data.data);\n      }\n    }).catch(err => {\n      toast.error(translator(\"errorDone\"));\n      console.log('err :>> ', err);\n    });\n  };\n\n  const options = countries.map(d => /*#__PURE__*/_jsxDEV(Option, {\n    children: d.localName\n  }, d.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 40\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      initialValues: initialValues,\n      onSubmit: submit,\n      enableReinitialize: true,\n      children: ({\n        errors,\n        touched,\n        setFieldValue\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"provinceId\",\n          children: \"provinceId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"provinceId\",\n          render: ({\n            field,\n            form\n          }) => /*#__PURE__*/_jsxDEV(Select, { ...field,\n            showSearch: true,\n            value: form.values[\"provinceId\"],\n            style: {\n              width: \"300px\"\n            },\n            defaultActiveFirstOption: false,\n            showArrow: false,\n            filterOption: false,\n            onSearch: getcountries,\n            onChange: (value, option) => form.setFieldValue(\"provinceId\", value),\n            notFoundContent: null,\n            children: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), errors.provinceId && touched.provinceId ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.provinceId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 69\n        }, this) : null, /*#__PURE__*/_jsxDEV(CommonField, {\n          errors: errors,\n          touched: touched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnForm, {\n      form: form,\n      name: \"control-hooks\" // initialValues={initialValues}\n      // validateMessages={validateMessages}\n      ,\n      onFinish: onFinish,\n      children: [/*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"shortCode\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"shortCode\",\n        label: translator(\"shortCode\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"otherName\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"otherName\",\n        label: translator(\"otherName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"otherName\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"enName\",\n        label: translator(\"enName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"localName\",\n        label: translator(\"localName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n        children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n          htmlType: \"Prvnbutton\",\n          onClick: onReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CitiesForm, \"gZbEKmggpZ97K4VxMChACwfy0Qo=\");\n\n_c = CitiesForm;\nexport default _c2 = withRouter(CitiesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CitiesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CitiesForm.js"],"names":["React","useEffect","useState","Formik","Form","Field","withRouter","Yup","geomanagementApi","CommonField","Select","toast","translator","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnUseForm","Option","CitiesForm","props","initialValues","setInitialValues","countries","setCountries","countrieLoading","setCountriesLoading","count","seCount","edit","id","location","state","get","then","res","console","log","data","catch","err","error","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","submit","values","put","success","post","getcountries","value","params","name","options","map","d","errors","touched","setFieldValue","field","form","width","option","provinceId","onFinish","message","min","onReset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport translator from '../../Translator/translator';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\n\nconst { Option } = Select;\n\nfunction CitiesForm(props) {\n    const [initialValues, setInitialValues] = useState({})\n    const [countries, setCountries] = useState([]);\n    // const [data, setCountries] = useState(false);\n    const [countrieLoading, setCountriesLoading] = useState(false);\n\n    const [count, seCount] = useState(true)\n\n    useEffect(async () => {\n        if (props.edit) {\n            const id = props.location.state && props.location.state.id\n            geomanagementApi.get(\"/cities/\" + id)\n                .then((res) => {\n                    console.log('res.data.data :>> ', res.data.data);\n                    setInitialValues(res.data.data)\n                }).catch((err) => {\n                    toast.error(translator(\"errorDone\"));\n                    console.log('err :>> ', err);\n                })\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const submit = async (values) => {\n        console.log('values :>> ', values);\n        if (props.edit == true) {\n            await geomanagementApi.put(`/cities/${values.id}`, values)\n                .then(() => {\n                    toast.success(translator(\"successDone\"));\n                })\n                .catch((err) => {\n                    toast.error(translator(\"errorDone\"));\n                    console.log('err :>> ', err);\n                })\n        } else {\n            await geomanagementApi.post(`/cities`, values).then(() => {\n                toast.success(translator(\"successDone\"));\n            }).catch(err => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err)\n            })\n        }\n    }\n\n\n    const getcountries = async (value) => {\n        console.log('value :>> ', value);\n        const params = {\n            name: value\n        }\n        geomanagementApi.get(`/provinces`, { params: params })\n            .then((res) => {\n                if (res.data.data) {\n                    setCountries(res.data.data)\n                }\n            }).catch((err) => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err);\n            })\n    }\n    const options = countries.map(d => <Option key={d.id}>{d.localName}</Option>)\n\n    return (\n        <div>\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={initialValues}\n                onSubmit={submit}\n                enableReinitialize\n            >\n                {({ errors, touched, setFieldValue }) => (\n                    <Form>\n\n                        <label htmlFor=\"provinceId\">provinceId</label>\n                        <Field\n                            name=\"provinceId\"\n                            render={({ field, form }) =>\n                                <Select\n                                    {...field}\n                                    showSearch\n                                    value={form.values[\"provinceId\"]}\n                                    style={{ width: \"300px\" }}\n                                    defaultActiveFirstOption={false}\n                                    showArrow={false}\n                                    filterOption={false}\n                                    onSearch={getcountries}\n                                    onChange={(value, option) =>\n                                        form.setFieldValue(\"provinceId\", value)\n                                    }\n                                    notFoundContent={null}\n                                >\n                                    {options}\n                                </Select>\n\n                            } />\n\n                        {errors.provinceId && touched.provinceId ? (<div>{errors.provinceId}</div>) : null}\n\n                        <CommonField\n                            errors={errors}\n                            touched={touched}\n                        />\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n\n            <PrvnForm\n                form={form}\n                name=\"control-hooks\"\n                // initialValues={initialValues}\n                // validateMessages={validateMessages}\n                onFinish={onFinish}>\n\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"shortCode\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"shortCode\"\n                    label={translator(\"shortCode\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"otherName\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"otherName\"\n                    label={translator(\"otherName\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"otherName\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"enName\"\n                    label={translator(\"enName\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"localName\"\n                    label={translator(\"localName\")}\n                />\n\n                <PrvnFormItem >\n\n                    <PrvnButton type=\"primary\" htmlType=\"submit\">\n                        Submit\n                 </PrvnButton>\n\n                    <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                        Reset\n            </PrvnButton>\n\n                </PrvnFormItem>\n            </PrvnForm >\n\n        </div >\n    );\n}\nexport default withRouter(CitiesForm);\n\n\n"]},"metadata":{},"sourceType":"module"}