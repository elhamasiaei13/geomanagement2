{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js\";\nimport { getDefaultNormalizer } from '@testing-library/react';\nimport { Formik, Field, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../service/api';\nimport translator from '../Translator/translator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WrapperForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validationSchema = Yup.object().shape({\n      personUuid: Yup.string().required()\n    });\n\n    this.submitHandler = (values, actions) => {\n      console.log('values :>> ', values);\n      console.log('actions :>> ', actions);\n    };\n\n    this.submit = async values => {\n      // await new Promise((r) => setTimeout(r, 500));\n      await geomanagementApi.post(\"/countries\", values).then(res => alert(res)).catch(err => alert(err)); // alert(JSON.stringify(values, r, 2));\n    };\n\n    this.state = {\n      initialValues: {}\n    };\n  }\n\n  componentDidMount() {\n    geomanagementApi.get(\"/countries/3\").then(res => {\n      this.setState({\n        initialValues: res.data.data\n      });\n    });\n  }\n\n  // const getinitialData = async () => {\n  //     const res = await geomanagementApi.get(\"/countries/3\")\n  //     let data = res.data && res.data.data\n  //     return res.data.data\n  // }\n  render() {\n    const {\n      initialValues\n    } = this.state;\n    console.log('this.state.initialValues :>> ', this.state.initialValues);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: this.state.initialValues,\n        onSubmit: this.submit,\n        render: ({\n          values,\n          errors,\n          touched,\n          status,\n          dirty,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          isValid,\n          handleReset,\n          setTouched\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"enName\",\n            children: \"enName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"enName\",\n            name: \"enName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"localName\",\n            children: \"localName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"localName\",\n            name: \"localName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"otherName\",\n            children: \"otherName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"otherName\",\n            name: \"otherName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"shortCode\",\n            children: \"shortCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"shortCode\",\n            name: \"shortCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: this.state.initialValues,\n        onSubmit: this.submit,\n        render: ({}) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"enName\",\n            children: \"enName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"enName\",\n            name: \"enName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"localName\",\n            children: \"localName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"localName\",\n            name: \"localName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"otherName\",\n            children: \"otherName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"otherName\",\n            name: \"otherName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"shortCode\",\n            children: \"shortCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            id: \"shortCode\",\n            name: \"shortCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WrapperForm;","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/WrapperForm.js"],"names":["getDefaultNormalizer","Formik","Field","Form","React","useEffect","useState","Yup","geomanagementApi","translator","WrapperForm","Component","constructor","props","validationSchema","object","shape","personUuid","string","required","submitHandler","values","actions","console","log","submit","post","then","res","alert","catch","err","state","initialValues","componentDidMount","get","setState","data","render","errors","touched","status","dirty","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","setTouched"],"mappings":"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","sourcesContent":["import { getDefaultNormalizer } from '@testing-library/react';\nimport { Formik, Field, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../service/api';\nimport translator from '../Translator/translator';\nclass WrapperForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialValues: {}\n        }\n    }\n\n\n    componentDidMount() {\n        geomanagementApi.get(\"/countries/3\").then((res) => {\n            this.setState({ initialValues: res.data.data })\n        })\n    }\n\n    validationSchema = Yup.object().shape({\n        personUuid: Yup.string().required(),\n\n    });\n    submitHandler = (values, actions) => {\n        console.log('values :>> ', values);\n        console.log('actions :>> ', actions);\n    }\n\n    // helpValue = (isTouched, hasErr) => {\n    //     return isTouched && hasErr\n    // }\n    // validateStatus = (isTouched, hasErr) => {\n    //     return isTouched && hasErr ? 'error' : ''\n    // }\n    submit = async (values) => {\n        // await new Promise((r) => setTimeout(r, 500));\n        await geomanagementApi.post(\"/countries\", values).then((res) =>\n            alert(res)).catch(err => alert(err))\n        // alert(JSON.stringify(values, r, 2));\n    }\n\n    // const getinitialData = async () => {\n    //     const res = await geomanagementApi.get(\"/countries/3\")\n    //     let data = res.data && res.data.data\n    //     return res.data.data\n\n    // }\n    render() {\n        const { initialValues } = this.state\n        console.log('this.state.initialValues :>> ', this.state.initialValues);\n        return (\n            <div>\n                <Formik\n                    initialValues={this.state.initialValues}\n                    onSubmit={this.submit}\n                    render={\n                        ({\n                            values,\n                            errors,\n                            touched,\n                            status,\n                            dirty,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            isSubmitting,\n                            isValid,\n                            handleReset,\n                            setTouched\n                        }) => (\n                                <Form>\n                                    <label htmlFor=\"enName\">enName</label>\n                                    <Field id=\"enName\" name=\"enName\" />\n\n                                    <label htmlFor=\"localName\">localName</label>\n                                    <Field id=\"localName\" name=\"localName\" />\n\n                                    <label htmlFor=\"otherName\">otherName</label>\n                                    <Field\n                                        id=\"otherName\"\n                                        name=\"otherName\"\n                                    />\n                                    <label htmlFor=\"shortCode\">shortCode</label>\n                                    <Field\n                                        id=\"shortCode\"\n                                        name=\"shortCode\"\n                                    />\n                                    <button type=\"submit\">Submit</button>\n                                </Form>\n                            )}>\n                </Formik>\n\n\n                <Formik\n                    initialValues={this.state.initialValues}\n                    onSubmit={this.submit}\n                    render={({\n\n                    }) => (\n                            <Form>\n                                <label htmlFor=\"enName\">enName</label>\n                                <Field id=\"enName\" name=\"enName\" />\n\n                                <label htmlFor=\"localName\">localName</label>\n                                <Field id=\"localName\" name=\"localName\" />\n\n                                <label htmlFor=\"otherName\">otherName</label>\n                                <Field\n                                    id=\"otherName\"\n                                    name=\"otherName\"\n                                />\n                                <label htmlFor=\"shortCode\">shortCode</label>\n                                <Field\n                                    id=\"shortCode\"\n                                    name=\"shortCode\"\n                                />\n                                <button type=\"submit\">Submit</button>\n                            </Form>\n\n                        )} />\n            </div>\n        );\n    }\n}\n\n\nexport default WrapperForm;"]},"metadata":{},"sourceType":"module"}