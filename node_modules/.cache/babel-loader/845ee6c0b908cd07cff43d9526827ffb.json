{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/Provinces.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DeleteModal from '../../component2/DeleteModal';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport { EditOutlined } from '@ant-design/icons';\nimport PrvnTable from '../../component2/PrvnTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Province(props) {\n  _s();\n\n  const [dataSource, setDataSource] = useState([]);\n  const [name, setName] = useState(undefined);\n  const columns = [{\n    title: 'nameLocal',\n    dataIndex: 'localName',\n    key: '1'\n  }, {\n    title: 'otherName',\n    dataIndex: 'otherName',\n    key: '2'\n  }, {\n    title: 'enName',\n    dataIndex: 'enName',\n    key: '3'\n  }, {\n    title: 'createTime',\n    dataIndex: 'createTime',\n    key: '4'\n  }, {\n    title: translator('Action'),\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: `/provinces/${record.id}/edit`,\n        state: {\n          id: record.id\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, {\n    title: 'deleted',\n    dataIndex: 'deleted',\n    key: 'deleted',\n    render: (text, record) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(DeleteModal, {\n          id: record.id,\n          record: record,\n          type: \"provinces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this)\n      }, void 0, false);\n    }\n  }];\n\n  const mySubmitHandler = event => {\n    event.preventDefault();\n    console.log('name :>> ', name);\n    getData();\n  };\n\n  const reset = event => {\n    event.preventDefault();\n    setName(\"\");\n    setDataSource([]);\n  };\n\n  const getData = () => {\n    const params = {\n      name: name\n    };\n    geomanagementApi.get(\"/provinces\", {\n      params: params\n    }).then(res => {\n      setDataSource(res.data.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [translator(\"provinces\"), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: [\" \", translator(\"create new provinces\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: translator(\"search\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"text\",\n          value: name,\n          onChange: e => {\n            setName(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: mySubmitHandler,\n          children: [\" \", translator(\"search\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: translator(\"reset\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnTable, {\n      dataSource: dataSource,\n      columns: columns,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Province, \"YxGI7qGmeNhFMNYHCB1yAN1263o=\");\n\n_c = Province;\nexport default Province;\n\nvar _c;\n\n$RefreshReg$(_c, \"Province\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/Provinces.js"],"names":["React","useEffect","useState","Link","DeleteModal","geomanagementApi","translator","EditOutlined","PrvnTable","Province","props","dataSource","setDataSource","name","setName","undefined","columns","title","dataIndex","key","render","text","record","pathname","id","state","mySubmitHandler","event","preventDefault","console","log","getData","reset","params","get","then","res","data","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DeleteModal from '../../component2/DeleteModal';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport { EditOutlined } from '@ant-design/icons';\nimport PrvnTable from '../../component2/PrvnTable';\n\nfunction Province(props) {\n    const [dataSource, setDataSource] = useState([])\n    const [name, setName] = useState(undefined)\n\n\n\n    const columns = [{\n        title: 'nameLocal',\n        dataIndex: 'localName',\n        key: '1',\n    },\n    {\n        title: 'otherName',\n        dataIndex: 'otherName',\n        key: '2',\n    },\n    {\n        title: 'enName',\n        dataIndex: 'enName',\n        key: '3',\n    },\n    {\n        title: 'createTime',\n        dataIndex: 'createTime',\n        key: '4',\n    },\n    {\n        title: translator('Action'),\n        key: 'action',\n        render: (text, record) => (\n            <Link\n                to={{\n                    pathname: `/provinces/${record.id}/edit`,\n                    state: { id: record.id }\n                }}\n            >\n                <EditOutlined />\n            </Link>\n        ),\n    },\n    {\n        title: 'deleted',\n        dataIndex: 'deleted',\n        key: 'deleted',\n        render: (text, record) => {\n            return <>\n                <DeleteModal id={record.id} record={record} type={\"provinces\"} />\n\n            </>\n        }\n    },\n    ]\n\n    const mySubmitHandler = (event) => {\n        event.preventDefault()\n        console.log('name :>> ', name);\n        getData()\n\n    }\n\n    const reset = (event) => {\n        event.preventDefault();\n        setName(\"\")\n        setDataSource([])\n\n    }\n\n    const getData = () => {\n        const params = { name: name }\n        geomanagementApi.get(\"/provinces\", { params: params }).then((res) => {\n            setDataSource(res.data.data)\n        })\n    }\n    return (\n\n        <div>\n            <h2>{translator(\"provinces\")} <button> {translator(\"create new provinces\")}</button></h2>\n\n            <div>\n                <h3>{translator(\"search\")}</h3>\n                <form>\n                    <span> name</span>\n                    <input required type=\"text\" value={name} onChange={(e) => {\n                        setName(e.target.value)\n                    }} />\n                    <button onClick={mySubmitHandler} > {translator(\"search\")}</button>\n                    <button onClick={reset} >{translator(\"reset\")}</button>\n                </form>\n            </div>\n\n            <PrvnTable\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            >\n            </PrvnTable>\n        </div>\n    );\n}\nexport default Province;"]},"metadata":{},"sourceType":"module"}