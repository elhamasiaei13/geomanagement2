{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/Modal.js\",\n    _s = $RefreshSig$();\n\nimport Modal from 'antd/lib/modal/Modal';\nimport React, { useEffect, useState } from 'react';\nimport translator from '../Translator/translator';\nimport { PrvnCol, PrvnTag } from './PrvnComponents';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport { geomanagementApi } from '../service/api';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DeleteModal(props) {\n  _s();\n\n  console.log('deleteModal :>> ', props);\n  const [isModalVisible, setIsModalVisible] = useState(false); // const [isModalVisible, setIsModalVisible] = useState(false);search param\n\n  useEffect(() => {}, [isModalVisible]);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = e => {\n    const {\n      id\n    } = props.id;\n    setIsModalVisible(false);\n    geomanagementApi.delete(`/${props.type}/${props.id}`).then(() => {\n      toast.success(translator(\"successDone\"));\n      props.getData();\n    }).catch(() => {\n      toast.error(translator(\"errorDone\"));\n    });\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.disabled ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"gray\"\n      },\n      children: props.btn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      classname: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: showModal,\n        children: props.btn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this), isModalVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", props.showMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            props.handleOk();\n            setIsModalVisible(false);\n          },\n          children: \"ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          children: \"cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }, this)\n  }, void 0, false);\n}\n\n_s(DeleteModal, \"DwYyXKZhqxNq7bk7RJfmi0CjwE8=\");\n\n_c = DeleteModal;\nexport default DeleteModal; // props.type = delete| active|deactive \\toggleapprove\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteModal\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/Modal.js"],"names":["Modal","React","useEffect","useState","translator","PrvnCol","PrvnTag","DeleteTwoTone","geomanagementApi","toast","DeleteModal","props","console","log","isModalVisible","setIsModalVisible","showModal","handleOk","e","id","delete","type","then","success","getData","catch","error","handleCancel","disabled","color","btn","showMessage"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,sBAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,kBAAjC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAASC,KAAT,QAAsB,gBAAtB;;;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD,CAFwB,CAGxB;;AACAD,EAAAA,SAAS,CAAC,MAAM,CAAG,CAAV,EAAY,CAACY,cAAD,CAAZ,CAAT;;AACA,QAAME,SAAS,GAAG,MAAM;AACpBD,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAFD;;AAIA,QAAME,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAASR,KAAK,CAACQ,EAArB;AACAJ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAP,IAAAA,gBAAgB,CAACY,MAAjB,CAAyB,IAAGT,KAAK,CAACU,IAAK,IAAGV,KAAK,CAACQ,EAAG,EAAnD,EACKG,IADL,CACU,MAAM;AACRb,MAAAA,KAAK,CAACc,OAAN,CAAcnB,UAAU,CAAC,aAAD,CAAxB;AACAO,MAAAA,KAAK,CAACa,OAAN;AACH,KAJL,EAKKC,KALL,CAKW,MAAM;AACThB,MAAAA,KAAK,CAACiB,KAAN,CAAYtB,UAAU,CAAC,WAAD,CAAtB;AACH,KAPL;AAQH,GAXD;;AAaA,QAAMuB,YAAY,GAAG,MAAM;AACvBZ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAFD;;AAIA,sBACI;AAAA,cAEQJ,KAAK,CAACiB,QAAN,gBACI;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA,gBACKlB,KAAK,CAACmB;AADX;AAAA;AAAA;AAAA;AAAA,YADJ,gBAIM;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAM,QAAA,OAAO,EAAEd,SAAf;AAAA,kBACKL,KAAK,CAACmB;AADX;AAAA;AAAA;AAAA;AAAA,cADF,EAKGhB,cAAc,iBACX;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,0BAAMH,KAAK,CAACoB,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAE,MAAM;AACnBpB,YAAAA,KAAK,CAACM,QAAN;AACAF,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAMI;AAAQ,UAAA,OAAO,EAAEY,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANN;AAAA;AAAA;AAAA;AAAA;AAAA;AANd,mBADJ;AA4BH;;GAtDQjB,W;;KAAAA,W;AAwDT,eAAeA,WAAf,C,CACA","sourcesContent":["import Modal from 'antd/lib/modal/Modal';\nimport React, { useEffect, useState } from 'react';\nimport translator from '../Translator/translator';\nimport { PrvnCol, PrvnTag } from './PrvnComponents';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport { geomanagementApi } from '../service/api';\nimport { toast } from 'react-toastify';\n\n\nfunction DeleteModal(props) {\n    console.log('deleteModal :>> ', props);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    // const [isModalVisible, setIsModalVisible] = useState(false);search param\n    useEffect(() => { }, [isModalVisible])\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleOk = (e) => {\n        const { id } = props.id\n        setIsModalVisible(false);\n        geomanagementApi.delete(`/${props.type}/${props.id}`)\n            .then(() => {\n                toast.success(translator(\"successDone\"));\n                props.getData();\n            })\n            .catch(() => {\n                toast.error(translator(\"errorDone\"));\n            })\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    return (\n        <>\n            {\n                props.disabled ?\n                    <span style={{ color: \"gray\" }}>\n                        {props.btn}\n                    </span>\n                    : <div classname=\"modal\">\n                        <span onClick={showModal} >\n                            {props.btn}\n                        </span>\n\n                        {isModalVisible &&\n                            <div className=\"modal\">\n                                <p > {props.showMessage}</p>\n                                <button onClick={() => {\n                                    props.handleOk()\n                                    setIsModalVisible(false);\n                                }} >ok</button>\n                                <button onClick={handleCancel}>cancel</button>\n                            </div>}\n                    </div>\n\n            }\n\n        </>\n\n    )\n}\n\nexport default DeleteModal;\n// props.type = delete| active|deactive \\toggleapprove"]},"metadata":{},"sourceType":"module"}