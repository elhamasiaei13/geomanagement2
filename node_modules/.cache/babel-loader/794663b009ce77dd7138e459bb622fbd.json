{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CitiesForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport translator from '../../Translator/translator';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../PrvnComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nfunction CitiesForm(props) {\n  _s();\n\n  const [form] = PrvnUseForm();\n  const [initialValues, setInitialValues] = useState({});\n  const [countries, setCountries] = useState([]); // const [data, setCountries] = useState(false);\n\n  const [countrieLoading, setCountriesLoading] = useState(false);\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      onFill();\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    nameEn: Yup.string().required(\"required\"),\n    nameLocal: Yup.string().required(\"required\"),\n    otherNames: Yup.string().required(\"required\"),\n    code: Yup.string().required(\"required\")\n  });\n\n  const submit = async values => {\n    console.log('values :>> ', values);\n\n    if (props.edit == true) {\n      await geomanagementApi.put(`/cities/${values.id}`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    } else {\n      await geomanagementApi.post(`/cities`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    }\n  };\n\n  const getcountries = async value => {\n    console.log('value :>> ', value);\n    const params = {\n      name: value\n    };\n    geomanagementApi.get(`/provinces`, {\n      params: params\n    }).then(res => {\n      if (res.data.data) {\n        setCountries(res.data.data);\n      }\n    }).catch(err => {\n      toast.error(translator(\"errorDone\"));\n      console.log('err :>> ', err);\n    });\n  };\n\n  const options = countries.map(d => /*#__PURE__*/_jsxDEV(Option, {\n    children: d.nameLocal\n  }, d.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 40\n  }, this));\n\n  const onFinish = async values => {\n    if (props.edit == true) {\n      await geomanagementApi.put(`/cities/${values.id}`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    } else {\n      await geomanagementApi.post(`/cities`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    }\n  };\n\n  const onFill = () => {\n    console.log('props.initialValues :>> ', props.initialValues);\n    const id = props.location.state && props.location.state.id;\n    geomanagementApi.get(\"/countries/\" + id).then(response => {\n      form.setFieldsValue(response.data.data);\n    });\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PrvnForm, {\n      form: form,\n      name: \"control-hooks\",\n      onFinish: onFinish,\n      children: [/*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"code\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"code\",\n        label: translator(\"code\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"otherNames\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"otherNames\",\n        label: translator(\"otherNames\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true,\n          message: `${translator(\"nameEn\")} الزامی است`\n        }, {\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"nameEn\",\n        label: translator(\"nameEn\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          min: 2,\n          message: 'طول عبارت کوتاه است'\n        }],\n        name: \"nameLocal\",\n        label: translator(\"nameLocal\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n        children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: translator(\"Submit\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n          htmlType: \"Prvnbutton\",\n          onClick: onReset,\n          children: translator(\"Reset\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CitiesForm, \"gZbEKmggpZ97K4VxMChACwfy0Qo=\");\n\n_c = CitiesForm;\nexport default _c2 = withRouter(CitiesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CitiesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CitiesForm.js"],"names":["React","useEffect","useState","Formik","Form","Field","withRouter","Yup","geomanagementApi","CommonField","Select","toast","translator","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnUseForm","Option","CitiesForm","props","form","initialValues","setInitialValues","countries","setCountries","countrieLoading","setCountriesLoading","count","seCount","edit","onFill","validationSchema","object","shape","nameEn","string","required","nameLocal","otherNames","code","submit","values","console","log","put","id","then","success","catch","err","error","post","getcountries","value","params","name","get","res","data","options","map","d","onFinish","location","state","response","setFieldsValue","onReset","resetFields","message","min"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport translator from '../../Translator/translator';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../PrvnComponents';\n\nconst { Option } = Select;\n\nfunction CitiesForm(props) {\n    const [form] = PrvnUseForm()\n\n    const [initialValues, setInitialValues] = useState({})\n    const [countries, setCountries] = useState([]);\n    // const [data, setCountries] = useState(false);\n    const [countrieLoading, setCountriesLoading] = useState(false);\n\n    const [count, seCount] = useState(true)\n\n\n    useEffect(async () => {\n        if (props.edit) {\n            onFill()\n        }\n    }, [])\n\n\n    const validationSchema = Yup.object().shape({\n        nameEn: Yup.string().required(\"required\"),\n        nameLocal: Yup.string().required(\"required\"),\n        otherNames: Yup.string().required(\"required\"),\n        code: Yup.string().required(\"required\"),\n    });\n\n    const submit = async (values) => {\n        console.log('values :>> ', values);\n        if (props.edit == true) {\n            await geomanagementApi.put(`/cities/${values.id}`, values)\n                .then(() => {\n                    toast.success(translator(\"successDone\"));\n                })\n                .catch((err) => {\n                    toast.error(translator(\"errorDone\"));\n                    console.log('err :>> ', err);\n                })\n        } else {\n            await geomanagementApi.post(`/cities`, values).then(() => {\n                toast.success(translator(\"successDone\"));\n            }).catch(err => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err)\n            })\n        }\n    }\n\n\n    const getcountries = async (value) => {\n        console.log('value :>> ', value);\n        const params = {\n            name: value\n        }\n        geomanagementApi.get(`/provinces`, { params: params })\n            .then((res) => {\n                if (res.data.data) {\n                    setCountries(res.data.data)\n                }\n            }).catch((err) => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err);\n            })\n    }\n\n    const options = countries.map(d => <Option key={d.id}>{d.nameLocal}</Option>)\n\n    const onFinish = async (values) => {\n        if (props.edit == true) {\n            await geomanagementApi.put(`/cities/${values.id}`, values)\n                .then(() => {\n                    toast.success(translator(\"successDone\"));\n                })\n                .catch((err) => {\n                    toast.error(translator(\"errorDone\"));\n                    console.log('err :>> ', err);\n                })\n\n        } else {\n            await geomanagementApi.post(`/cities`, values).then(() => {\n                toast.success(translator(\"successDone\"));\n            })\n                .catch((err) => {\n                    toast.error(translator(\"errorDone\"));\n                    console.log('err :>> ', err);\n                })\n        }\n    }\n\n    const onFill = () => {\n        console.log('props.initialValues :>> ', props.initialValues);\n        const id = props.location.state && props.location.state.id\n        geomanagementApi.get(\"/countries/\" + id).then((response) => {\n\n            form.setFieldsValue(response.data.data)\n        })\n\n    };\n    const onReset = () => {\n        form.resetFields();\n    };\n\n\n\n    return (\n        <div>\n            {/* <Formik\n                validationSchema={validationSchema}\n                initialValues={initialValues}\n                onSubmit={submit}\n                enableReinitialize\n            >\n                {({ errors, touched, setFieldValue }) => (\n                    <Form>\n\n                        <label htmlFor=\"provinceId\">provinceId</label>\n                        <Field\n                            name=\"provinceId\"\n                            render={({ field, form }) =>\n                                <Select\n                                    {...field}\n                                    showSearch\n                                    value={form.values[\"provinceId\"]}\n                                    style={{ width: \"300px\" }}\n                                    defaultActiveFirstOption={false}\n                                    showArrow={false}\n                                    filterOption={false}\n                                    onSearch={getcountries}\n                                    onChange={(value, option) =>\n                                        form.setFieldValue(\"provinceId\", value)\n                                    }\n                                    notFoundContent={null}\n                                >\n                                    {options}\n                                </Select>\n\n                            } />\n\n                        {errors.provinceId && touched.provinceId ? (<div>{errors.provinceId}</div>) : null}\n\n                        <CommonField\n                            errors={errors}\n                            touched={touched}\n                        />\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik> */}\n\n            {/* <Select\n                                    {...field}\n                                    showSearch\n                                    value={form.values[\"provinceId\"]}\n                                    style={{ width: \"300px\" }}\n                                    defaultActiveFirstOption={false}\n                                    showArrow={false}\n                                    filterOption={false}\n                                    onSearch={getcountries}\n                                    onChange={(value, option) =>\n                                        form.setFieldValue(\"provinceId\", value)\n                                    }\n                                    notFoundContent={null}\n                                >\n                                    {options}\n                                </Select> */}\n            <PrvnForm\n                form={form}\n                name=\"control-hooks\"\n                onFinish={onFinish}>\n\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"code\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"code\"\n                    label={translator(\"code\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"otherNames\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"otherNames\"\n                    label={translator(\"otherNames\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ required: true, message: `${translator(\"nameEn\")} الزامی است` }, { min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"nameEn\"\n                    label={translator(\"nameEn\")}\n                />\n                <PrvnFormItemInput\n                    rules={[{ min: 2, message: 'طول عبارت کوتاه است' }]}\n                    name=\"nameLocal\"\n                    label={translator(\"nameLocal\")}\n                />\n\n                <PrvnFormItem >\n                    <PrvnButton type=\"primary\" htmlType=\"submit\">\n                        {translator(\"Submit\")}\n                    </PrvnButton>\n\n                    <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                        {translator(\"Reset\")}\n                    </PrvnButton>\n                </PrvnFormItem>\n            </PrvnForm >\n\n        </div >\n    );\n}\nexport default withRouter(CitiesForm);\n\n\n"]},"metadata":{},"sourceType":"module"}