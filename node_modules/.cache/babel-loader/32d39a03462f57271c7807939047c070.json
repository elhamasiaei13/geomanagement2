{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { PrvnSelect } from '../../component2/PrvnComponents';\nimport { Select } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nfunction ProvinceForm(props) {\n  _s();\n\n  const [initialValues, setInitialValues] = useState({});\n  const [countries, setCountries] = useState([]); // const [data, setCountries] = useState(false);\n\n  const [countrieLoading, setCountriesLoading] = useState(false);\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      const id = props.location.state && props.location.state.id;\n      geomanagementApi.get(\"/province/\" + id).then(res => {\n        console.log('res.data.data :>> ', res.data.data);\n        setInitialValues(res.data.data);\n      });\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const submit = async values => {\n    console.log('values :>> ', values);\n\n    if (props.edit = true) {\n      await geomanagementApi.put(`/proninces/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    } else {\n      await geomanagementApi.put(`/proninces/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    }\n  };\n\n  const getcountries = async value => {\n    console.log('value :>> ', value);\n    const params = {\n      name: value\n    }; // geomanagementApi.get(`/countries/`, { params: params }).then((res) => {\n    //     })\n    // setCountriesLoading(true)\n    // const params = {\n    //     term: \"\"\n    // }\n    // await geomanagementApi.put(`/countries/`, { params: params }).then((res) => {\n    //     let arrayMission = []\n    //     res.data.data.elements.map((it) => {\n    //         arrayMission.push({\n    //             lable: ` نام راننده (${it.firstName}  ${it.lastName})  ,  شماره پلاک (${it.carrierRegister}) `,\n    //             data: it,\n    //             value: it.id\n    //         })\n    //     })\n    //     // setMissions(arrayMission)\n    // }).catch(err => {\n    //     console.log('err :>> ', err);\n    // })\n    //     .finally(() => {\n    //         // setMissionLoading(false)\n    //     })\n  };\n\n  const options = countries.map(d => /*#__PURE__*/_jsxDEV(Option, {\n    children: d.text\n  }, d.value, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 40\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log('props  countries >> ', props), /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      initialValues: initialValues,\n      onSubmit: submit,\n      enableReinitialize: true,\n      children: ({\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"countryId\",\n          children: \"countryId555\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Field // name=\"countryId\"\n        , {\n          render: ({\n            field,\n            form\n          }) => /*#__PURE__*/_jsxDEV(Select, {\n            showSearch: true // value={value}\n            // placeholder={this.props.placeholder}\n            ,\n            style: {\n              width: \"300px\"\n            },\n            defaultActiveFirstOption: false,\n            showArrow: false,\n            filterOption: false,\n            onSearch: getcountries // onChange={this.handleChange}\n            ,\n            notFoundContent: null,\n            children: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this), errors.countryId && touched.countryId ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errors.countryId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 71\n        }, this) : null, /*#__PURE__*/_jsxDEV(CommonField, {\n          errors: errors,\n          touched: touched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ProvinceForm, \"gZbEKmggpZ97K4VxMChACwfy0Qo=\");\n\n_c = ProvinceForm;\nexport default _c2 = withRouter(ProvinceForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProvinceForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js"],"names":["Formik","Form","Field","React","useEffect","useState","withRouter","Yup","geomanagementApi","CommonField","PrvnSelect","Select","Option","ProvinceForm","props","initialValues","setInitialValues","countries","setCountries","countrieLoading","setCountriesLoading","count","seCount","edit","id","location","state","get","then","res","console","log","data","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","submit","values","put","alert","catch","err","getcountries","value","params","name","options","map","d","text","errors","touched","field","form","width","countryId"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { PrvnSelect } from '../../component2/PrvnComponents';\nimport { Select } from 'antd';\nconst { Option } = Select;\n\nfunction ProvinceForm(props) {\n    const [initialValues, setInitialValues] = useState({})\n    const [countries, setCountries] = useState([]);\n    // const [data, setCountries] = useState(false);\n    const [countrieLoading, setCountriesLoading] = useState(false);\n\n    const [count, seCount] = useState(true)\n\n    useEffect(async () => {\n        if (props.edit) {\n            const id = props.location.state && props.location.state.id\n            geomanagementApi.get(\"/province/\" + id).then((res) => {\n                console.log('res.data.data :>> ', res.data.data);\n                setInitialValues(res.data.data)\n            })\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const submit = async (values) => {\n        console.log('values :>> ', values);\n        if (props.edit = true) {\n            await geomanagementApi.put(`/proninces/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        } else {\n            await geomanagementApi.put(`/proninces/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        }\n    }\n\n\n    const getcountries = async (value) => {\n        console.log('value :>> ', value);\n        const params = {\n            name: value\n        }\n        // geomanagementApi.get(`/countries/`, { params: params }).then((res) => {\n          \n        //     })\n\n        \n            // setCountriesLoading(true)\n            // const params = {\n            //     term: \"\"\n            // }\n            // await geomanagementApi.put(`/countries/`, { params: params }).then((res) => {\n            //     let arrayMission = []\n            //     res.data.data.elements.map((it) => {\n            //         arrayMission.push({\n            //             lable: ` نام راننده (${it.firstName}  ${it.lastName})  ,  شماره پلاک (${it.carrierRegister}) `,\n            //             data: it,\n            //             value: it.id\n            //         })\n            //     })\n            //     // setMissions(arrayMission)\n\n            // }).catch(err => {\n            //     console.log('err :>> ', err);\n            // })\n            //     .finally(() => {\n            //         // setMissionLoading(false)\n            //     })\n        }\n    const options = countries.map(d => <Option key={d.value}>{d.text}</Option>)\n\n        return (\n            <div>\n                {console.log('props  countries >> ', props)}\n                <Formik\n                    validationSchema={validationSchema}\n                    initialValues={initialValues}\n                    onSubmit={submit}\n                    enableReinitialize\n                >\n                    {({ errors, touched }) => (\n                        <Form>\n\n                            <label htmlFor=\"countryId\">countryId555</label>\n                            <Field\n                                // name=\"countryId\"\n                                render={({ field, form }) =>\n                                    <Select\n                                        showSearch\n                                        // value={value}\n                                        // placeholder={this.props.placeholder}\n                                        style={{ width: \"300px\" }}\n                                        defaultActiveFirstOption={false}\n                                        showArrow={false}\n                                        filterOption={false}\n                                        onSearch={getcountries}\n                                        // onChange={this.handleChange}\n                                        notFoundContent={null}\n                                    >\n                                        {options}\n                                    </Select>\n\n                                } />\n\n                            {errors.countryId && touched.countryId ? (<div>{errors.countryId}</div>) : null}\n\n                            <CommonField\n                                errors={errors}\n                                touched={touched}\n                            />\n                            <button type=\"submit\">Submit</button>\n                        </Form>\n                    )}\n                </Formik>\n            </div >\n        );\n    }\n\n    export default withRouter(ProvinceForm);"]},"metadata":{},"sourceType":"module"}