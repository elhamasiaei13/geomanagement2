{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js\",\n    _s = $RefreshSig$();\n\nimport { Select } from 'antd'; // import { Formik, Form, Field } from 'formik';\n// import React, { useEffect, useState } from 'react';\n// import { withRouter } from 'react-router-dom';\n// import * as Yup from 'yup';\n// import { geomanagementApi } from '../../service/api';\n// import CommonField from '../CommonField';\n// import { PrvnSelect } from '../../component2/PrvnComponents';\n// import { Select } from 'antd';\n// const { Option } = Select;\n// function ProvinceForm(props) {\n//     const [initialValues, setInitialValues] = useState({})\n//     const [countries, setCountries] = useState([]);\n//     const [countrieLoading, setCountriesLoading] = useState(false);\n//     const [count, seCount] = useState(true)\n//     useEffect(async () => {\n//         if (props.edit) {\n//             const id = props.location.state && props.location.state.id\n//             geomanagementApi.get(\"/provinces/\" + id).then((res) => {\n//                 console.log('res.data.data :>> ', res.data.data);\n//                 setInitialValues(res.data.data)\n//             })\n//         }\n//     }, [])\n//     const validationSchema = Yup.object().shape({\n//         enName: Yup.string().required(\"required\"),\n//         localName: Yup.string().required(\"required\"),\n//         otherName: Yup.string().required(\"required\"),\n//         shortCode: Yup.string().required(\"required\"),\n//     });\n//     const submit = async (values) => {\n//         console.log('values :>> ', values);\n//         if (props.edit == true) {\n//             await geomanagementApi.put(`/provinces/${values.id}`, values).then((res) => {\n//                 alert(res)\n//                 props.history.push(\"/provinces\")\n//             })\n//                 .catch(err => alert(err))\n//         } else {\n//             await geomanagementApi.post(`/provinces`, values).then((res) => {\n//                 props.history.push(\"/provinces\")\n//                 alert(res)\n//             })\n//                 .catch(err => alert(err))\n//         }\n//     }\n//     const getcountries = async (value) => {\n//         console.log('value :>> ', value);\n//         const params = {\n//             name: value\n//         }\n//         geomanagementApi.get(`/provinces`, { params: params }).then(res => {\n//             if (res.data.data) {\n//                 setCountries(res.data.data)\n//             }\n//             // setCountries(res.data.data)\n//         })\n//     }\n//     const options = countries.map(d => <Option key={d.id}>{d.localName}</Option>)\n//     return (\n//         <div>\n//             <Formik\n//                 validationSchema={validationSchema}\n//                 initialValues={initialValues}\n//                 onSubmit={submit}\n//                 enableReinitialize\n//             >\n//                 {({ errors, touched, setFieldValue }) => (\n//                     <Form>\n//                         <label htmlFor=\"countryId\">countryId</label>\n//                         <Field\n//                             name=\"countryId\"\n//                             render={({ field, form }) =>\n//                                 <Select\n//                                     {...field}\n//                                     showSearch\n//                                     value={form.values[\"countryId\"]}\n//                                     style={{ width: \"300px\" }}\n//                                     defaultActiveFirstOption={false}\n//                                     showArrow={false}\n//                                     filterOption={false}\n//                                     onSearch={getcountries}\n//                                     onChange={(value, option) =>\n//                                         form.setFieldValue(\"countryId\", value)\n//                                     }\n//                                     notFoundContent={null}\n//                                 >\n//                                     {options}\n//                                 </Select>\n//                             } />\n//                         {errors.countryId && touched.countryId ? (<div>{errors.countryId}</div>) : null}\n//                         <CommonField\n//                             errors={errors}\n//                             touched={touched}\n//                         />\n//                         <button type=\"submit\">Submit</button>\n//                     </Form>\n//                 )}\n//             </Formik>\n//         </div >\n//     );\n// }\n// export default withRouter(ProvinceForm);\n\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnFormItemSelect, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nfunction CountriesForm(props) {\n  _s();\n\n  const [form] = PrvnUseForm();\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(async () => {\n    if (props.edit) {\n      onFill();\n    }\n  }, [countries]);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const onFinish = async values => {\n    if (props.edit == true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    } else {\n      await geomanagementApi.post(`/countries`, values).then(() => {\n        toast.success(translator(\"successDone\"));\n      }).catch(err => {\n        toast.error(translator(\"errorDone\"));\n        console.log('err :>> ', err);\n      });\n    }\n  };\n\n  const onFill = () => {\n    console.log('props.initialValues :>> ', props.initialValues);\n    const id = props.location.state && props.location.state.id;\n    geomanagementApi.get(\"/countries/\" + id).then(response => {\n      form.setFieldsValue(response.data.data);\n    });\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const getcountries = async value => {\n    console.log('value :>> ', value);\n    const params = {\n      name: value\n    };\n    setLoading(true);\n    let arrayCountries = [];\n\n    try {\n      const response = await geomanagementApi.get(`/provinces`, {\n        params: params\n      });\n\n      if (response.data.data) {\n        response.data.data.map(it => {\n          arrayCountries.push({\n            lable: `${it.localName} , ${it.enName} `,\n            data: it,\n            value: it.id\n          });\n        });\n      }\n\n      setLoading(false);\n      setCountries(arrayCountries);\n    } catch (error) {\n      console.log('error.message :>> ', error.message);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PrvnForm, {\n    form: form,\n    name: \"control-hooks\" // initialValues={initialValues}\n    ,\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(PrvnFormItem, {\n      name: \"countryId\",\n      label: translator(\"countryId\"),\n      ...props,\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        showSearch: true,\n        loading: loading,\n        allowClear: true,\n        name: \"countryId\",\n        onSearch: getcountries // onFocus={getcountries}\n        ,\n        children: countries.map(opt => /*#__PURE__*/_jsxDEV(Option, {\n          value: opt.value,\n          children: opt.lable\n        }, JSON.stringify(opt), false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"enName\",\n      label: translator(\"enName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"localName\",\n      label: translator(\"localName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"otherName\",\n      label: translator(\"otherName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"shortCode\",\n      label: translator(\"shortCode\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n      children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n        htmlType: \"Prvnbutton\",\n        onClick: onReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 13\n  }, this);\n}\n\n_s(CountriesForm, \"zu9UnZYt6yR/lCUX3/weltr1dvQ=\");\n\n_c = CountriesForm;\nexport default _c2 = withRouter(CountriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js"],"names":["Select","Formik","Form","Field","React","useEffect","useState","withRouter","toast","Yup","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnFormItemSelect","PrvnUseForm","geomanagementApi","translator","CommonField","Option","CountriesForm","props","form","initialValues","setInitialValues","count","seCount","countries","setCountries","loading","setLoading","edit","onFill","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","onFinish","values","put","id","then","success","catch","err","error","console","log","post","location","state","get","response","setFieldsValue","data","onReset","resetFields","getcountries","value","params","name","arrayCountries","map","it","push","lable","message","opt","JSON","stringify"],"mappings":"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","sourcesContent":["import { Select } from 'antd';\n// import { Formik, Form, Field } from 'formik';\n// import React, { useEffect, useState } from 'react';\n// import { withRouter } from 'react-router-dom';\n// import * as Yup from 'yup';\n// import { geomanagementApi } from '../../service/api';\n// import CommonField from '../CommonField';\n// import { PrvnSelect } from '../../component2/PrvnComponents';\n// import { Select } from 'antd';\n// const { Option } = Select;\n\n// function ProvinceForm(props) {\n//     const [initialValues, setInitialValues] = useState({})\n//     const [countries, setCountries] = useState([]);\n//     const [countrieLoading, setCountriesLoading] = useState(false);\n\n//     const [count, seCount] = useState(true)\n\n//     useEffect(async () => {\n//         if (props.edit) {\n//             const id = props.location.state && props.location.state.id\n//             geomanagementApi.get(\"/provinces/\" + id).then((res) => {\n//                 console.log('res.data.data :>> ', res.data.data);\n//                 setInitialValues(res.data.data)\n//             })\n//         }\n//     }, [])\n\n//     const validationSchema = Yup.object().shape({\n//         enName: Yup.string().required(\"required\"),\n//         localName: Yup.string().required(\"required\"),\n//         otherName: Yup.string().required(\"required\"),\n//         shortCode: Yup.string().required(\"required\"),\n//     });\n\n//     const submit = async (values) => {\n//         console.log('values :>> ', values);\n//         if (props.edit == true) {\n//             await geomanagementApi.put(`/provinces/${values.id}`, values).then((res) => {\n//                 alert(res)\n//                 props.history.push(\"/provinces\")\n//             })\n//                 .catch(err => alert(err))\n//         } else {\n//             await geomanagementApi.post(`/provinces`, values).then((res) => {\n//                 props.history.push(\"/provinces\")\n//                 alert(res)\n//             })\n//                 .catch(err => alert(err))\n//         }\n//     }\n\n\n//     const getcountries = async (value) => {\n//         console.log('value :>> ', value);\n//         const params = {\n//             name: value\n//         }\n//         geomanagementApi.get(`/provinces`, { params: params }).then(res => {\n//             if (res.data.data) {\n//                 setCountries(res.data.data)\n//             }\n//             // setCountries(res.data.data)\n//         })\n\n//     }\n//     const options = countries.map(d => <Option key={d.id}>{d.localName}</Option>)\n\n//     return (\n//         <div>\n//             <Formik\n//                 validationSchema={validationSchema}\n//                 initialValues={initialValues}\n//                 onSubmit={submit}\n//                 enableReinitialize\n//             >\n//                 {({ errors, touched, setFieldValue }) => (\n//                     <Form>\n//                         <label htmlFor=\"countryId\">countryId</label>\n//                         <Field\n//                             name=\"countryId\"\n//                             render={({ field, form }) =>\n//                                 <Select\n//                                     {...field}\n//                                     showSearch\n//                                     value={form.values[\"countryId\"]}\n//                                     style={{ width: \"300px\" }}\n//                                     defaultActiveFirstOption={false}\n//                                     showArrow={false}\n//                                     filterOption={false}\n//                                     onSearch={getcountries}\n//                                     onChange={(value, option) =>\n//                                         form.setFieldValue(\"countryId\", value)\n//                                     }\n//                                     notFoundContent={null}\n//                                 >\n//                                     {options}\n//                                 </Select>\n\n//                             } />\n//                         {errors.countryId && touched.countryId ? (<div>{errors.countryId}</div>) : null}\n//                         <CommonField\n//                             errors={errors}\n//                             touched={touched}\n//                         />\n//                         <button type=\"submit\">Submit</button>\n//                     </Form>\n//                 )}\n//             </Formik>\n//         </div >\n//     );\n// }\n\n// export default withRouter(ProvinceForm);\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnFormItemSelect, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\n\nconst { Option } = Select;\n\nfunction CountriesForm(props) {\n    const [form] = PrvnUseForm()\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n    const [countries, setCountries] = useState([]);\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(async () => {\n        if (props.edit) {\n            onFill()\n        }\n    }, [countries])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const onFinish = async (values) => {\n        if (props.edit == true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values)\n            .then(() => {\n                toast.success(translator(\"successDone\"));\n            })\n             .catch((err) => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err);\n            })\n            \n        } else {\n            await geomanagementApi.post(`/countries`, values).then(() => {\n                toast.success(translator(\"successDone\"));\n            })\n             .catch((err) => {\n                toast.error(translator(\"errorDone\"));\n                console.log('err :>> ', err);\n            })\n        }\n    }\n\n    const onFill = () => {\n        console.log('props.initialValues :>> ', props.initialValues);\n        const id = props.location.state && props.location.state.id\n        geomanagementApi.get(\"/countries/\" + id).then((response) => {\n\n            form.setFieldsValue(response.data.data)\n        })\n\n    };\n    const onReset = () => {\n        form.resetFields();\n    };\n\n    const getcountries = async (value) => {\n        console.log('value :>> ', value);\n        const params = {\n            name: value\n        }\n        setLoading(true)\n        let arrayCountries = []\n\n        try {\n            const response = await geomanagementApi.get(`/provinces`, { params: params })\n            if (response.data.data) {\n                response.data.data.map((it) => {\n                    arrayCountries.push({\n                        lable: `${it.localName} , ${it.enName} `,\n                        data: it,\n                        value: it.id\n                    })\n                })\n            }\n            setLoading(false)\n            setCountries(arrayCountries)\n\n        } catch (error) {\n            console.log('error.message :>> ', error.message);\n            setLoading(false)\n        }\n    }\n\n    return (<PrvnForm\n        form={form}\n        name=\"control-hooks\"\n        // initialValues={initialValues}\n        onFinish={onFinish}>\n        <PrvnFormItem name={\"countryId\"} label={translator(\"countryId\")}  {...props} >\n\n            <Select showSearch loading={loading}\n                allowClear={true}\n                name={\"countryId\"}\n                onSearch={getcountries}\n                // onFocus={getcountries}\n                >\n                {countries.map(opt =>\n                    <Option key={JSON.stringify(opt)} value={opt.value}>{opt.lable}</Option>\n                )}\n            </Select>\n        </PrvnFormItem>\n\n\n        {/* <PrvnFormItemSelect\n            loading={loading}\n            showSearch\n            allowClear={true}\n            name={\"countryId\"}\n            label={translator(\"countryId\")}\n            optionvalue={countries}\n            onSearch={getcountries}\n            allowClear\n            onFocus={getcountries}\n        /> */}\n        <PrvnFormItemInput\n            rules={[{ required: true }]}\n            name=\"enName\"\n            label={translator(\"enName\")}\n        />\n        <PrvnFormItemInput\n            rules={[{ required: true }]}\n            name=\"localName\"\n            label={translator(\"localName\")}\n        />\n        <PrvnFormItemInput\n            rules={[{ required: true }]}\n            name=\"otherName\"\n            label={translator(\"otherName\")}\n        />\n        <PrvnFormItemInput\n            rules={[{ required: true }]}\n            name=\"shortCode\"\n            label={translator(\"shortCode\")}\n        />\n        <PrvnFormItem >\n\n            <PrvnButton type=\"primary\" htmlType=\"submit\">\n                Submit\n                 </PrvnButton>\n\n            <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                Reset\n            </PrvnButton>\n\n        </PrvnFormItem>\n    </PrvnForm >\n\n    );\n}\n\nexport default withRouter(CountriesForm);"]},"metadata":{},"sourceType":"module"}