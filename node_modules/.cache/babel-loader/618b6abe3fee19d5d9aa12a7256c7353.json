{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountriesForm(props) {\n  _s();\n\n  const [form] = PrvnUseForm();\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      onFill();\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const onFinish = async values => {\n    if (props.edit == true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res.data);\n      }).catch(err => alert(err));\n    } else {\n      await geomanagementApi.post(`/countries`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res);\n      }).catch(err => alert(err));\n    }\n  };\n\n  const onFill = () => {\n    console.log('props.initialValues :>> ', props.initialValues);\n    const id = props.location.state && props.location.state.id;\n    geomanagementApi.get(\"/countries/\" + id).then(response => {\n      form.setFieldsValue(response.data.data);\n    });\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  return /*#__PURE__*/_jsxDEV(PrvnForm, {\n    form: form,\n    name: \"control-hooks\" // initialValues={initialValues}\n    ,\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"enName\",\n      label: translator(\"enName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"localName\",\n      label: translator(\"localName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"otherName\",\n      label: translator(\"otherName\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n      rules: [{\n        required: true\n      }],\n      name: \"shortCode\",\n      label: translator(\"shortCode\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n      children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n        htmlType: \"Prvnbutton\",\n        onClick: onReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this) // <div>\n  //     <Formik\n  //         validationSchema={validationSchema}\n  //         // initialValues={initialValues}\n  //         initialValues={{\n  //             enName: \"United Arab Emirates\",\n  //             localName: \"امارات متحده عربی\",\n  //             otherName: \"othername\",\n  //             shortCode: \"AE\",\n  //         }}\n  //         onSubmit={submit}\n  //     // enableReinitialize\n  //     >\n  //         {({ errors, touched,values }) => (\n  //             <Form>\n  //                 <label htmlFor=\"enName\">enName</label>\n  //                 <Field name=\"enName\" />\n  //                 {errors.enName && touched.enName ? (<div>{errors.enName}</div>) : null}\n  //                 <label htmlFor=\"localName\">localName</label>\n  //                 <Field id=\"localName\" name=\"localName\" />\n  //                 {errors.localName && touched.localName ? (<div>{errors.localName}</div>) : null}\n  //                 <label htmlFor=\"otherName\">otherName</label>\n  //                 <Field id=\"otherName\" name=\"otherName\" />\n  //                 {errors.otherName && touched.otherName ? (<div>{errors.otherName}</div>) : null}\n  //                 <label htmlFor=\"shortCode\">shortCode</label>\n  //                 <Field id=\"shortCode\" name=\"shortCode\" />\n  //                 {errors.shortCode && touched.shortCode ? (<div>{errors.shortCode}</div>) : null}\n  //                 {/* <CommonField\n  //                     errors={errors}\n  //                     touched={touched}\n  //                 /> */}\n  //                 <button type=\"submit\">Submit</button>\n  //             </Form>\n  //         )}\n  //     </Formik>\n  // </div >\n  ;\n}\n\n_s(CountriesForm, \"KBY71AgJEE6onhJmrYTSshyGgzM=\");\n\n_c = CountriesForm;\nexport default _c2 = withRouter(CountriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/CountriesForm.js"],"names":["Formik","Form","Field","React","useEffect","useState","withRouter","Yup","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnUseForm","geomanagementApi","translator","CommonField","CountriesForm","props","form","initialValues","setInitialValues","count","seCount","edit","onFill","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","onFinish","values","put","id","then","res","history","push","alert","data","catch","err","post","console","log","location","state","get","response","setFieldsValue","onReset","resetFields"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\n\nfunction CountriesForm(props) {\n    const [form] = PrvnUseForm()\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n\n    useEffect(async () => {\n        if (props.edit) {\n            onFill()\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const onFinish = async (values) => {\n        if (props.edit == true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res.data)\n            }).catch(err => alert(err))\n        } else {\n            await geomanagementApi.post(`/countries`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res)\n            }).catch(err => alert(err))\n        }\n    }\n\n    const onFill = () => {\n        console.log('props.initialValues :>> ', props.initialValues);\n        const id = props.location.state && props.location.state.id\n        geomanagementApi.get(\"/countries/\" + id).then((response) => {\n\n            form.setFieldsValue(response.data.data)\n        })\n\n    };\n    const onReset = () => {\n        form.resetFields();\n    };\n    return (\n        <PrvnForm\n            form={form}\n            name=\"control-hooks\"\n            // initialValues={initialValues}\n            onFinish={onFinish}>\n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"enName\"\n                label={translator(\"enName\")}\n            /> \n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"localName\"\n                label={translator(\"localName\")}\n            />\n             <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"otherName\"\n                label={translator(\"otherName\")}\n            /> \n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"shortCode\"\n                label={translator(\"shortCode\")}\n            />\n            <PrvnFormItem >\n\n                <PrvnButton type=\"primary\" htmlType=\"submit\">\n                    Submit\n                 </PrvnButton>\n\n                <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                    Reset\n            </PrvnButton>\n\n            </PrvnFormItem>\n        </PrvnForm >\n\n        // <div>\n        //     <Formik\n        //         validationSchema={validationSchema}\n        //         // initialValues={initialValues}\n        //         initialValues={{\n        //             enName: \"United Arab Emirates\",\n        //             localName: \"امارات متحده عربی\",\n        //             otherName: \"othername\",\n        //             shortCode: \"AE\",\n        //         }}\n        //         onSubmit={submit}\n        //     // enableReinitialize\n        //     >\n        //         {({ errors, touched,values }) => (\n        //             <Form>\n        //                 <label htmlFor=\"enName\">enName</label>\n        //                 <Field name=\"enName\" />\n        //                 {errors.enName && touched.enName ? (<div>{errors.enName}</div>) : null}\n\n        //                 <label htmlFor=\"localName\">localName</label>\n        //                 <Field id=\"localName\" name=\"localName\" />\n        //                 {errors.localName && touched.localName ? (<div>{errors.localName}</div>) : null}\n\n        //                 <label htmlFor=\"otherName\">otherName</label>\n        //                 <Field id=\"otherName\" name=\"otherName\" />\n        //                 {errors.otherName && touched.otherName ? (<div>{errors.otherName}</div>) : null}\n\n        //                 <label htmlFor=\"shortCode\">shortCode</label>\n        //                 <Field id=\"shortCode\" name=\"shortCode\" />\n        //                 {errors.shortCode && touched.shortCode ? (<div>{errors.shortCode}</div>) : null}\n\n        //                 {/* <CommonField\n        //                     errors={errors}\n        //                     touched={touched}\n        //                 /> */}\n        //                 <button type=\"submit\">Submit</button>\n        //             </Form>\n        //         )}\n        //     </Formik>\n        // </div >\n    );\n}\n\nexport default withRouter(CountriesForm);"]},"metadata":{},"sourceType":"module"}