{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js\",\n    _s = $RefreshSig$();\n\n// import { Formik, Form, Field } from 'formik';\n// import React, { useEffect, useState } from 'react';\n// import { withRouter } from 'react-router-dom';\n// import * as Yup from 'yup';\n// import { geomanagementApi } from '../../service/api';\n// import CommonField from '../CommonField';\n// import { PrvnSelect } from '../../component2/PrvnComponents';\n// import { Select } from 'antd';\n// const { Option } = Select;\n// function ProvinceForm(props) {\n//     const [initialValues, setInitialValues] = useState({})\n//     const [countries, setCountries] = useState([]);\n//     const [countrieLoading, setCountriesLoading] = useState(false);\n//     const [count, seCount] = useState(true)\n//     useEffect(async () => {\n//         if (props.edit) {\n//             const id = props.location.state && props.location.state.id\n//             geomanagementApi.get(\"/provinces/\" + id).then((res) => {\n//                 console.log('res.data.data :>> ', res.data.data);\n//                 setInitialValues(res.data.data)\n//             })\n//         }\n//     }, [])\n//     const validationSchema = Yup.object().shape({\n//         enName: Yup.string().required(\"required\"),\n//         localName: Yup.string().required(\"required\"),\n//         otherName: Yup.string().required(\"required\"),\n//         shortCode: Yup.string().required(\"required\"),\n//     });\n//     const submit = async (values) => {\n//         console.log('values :>> ', values);\n//         if (props.edit == true) {\n//             await geomanagementApi.put(`/provinces/${values.id}`, values).then((res) => {\n//                 alert(res)\n//                 props.history.push(\"/provinces\")\n//             })\n//                 .catch(err => alert(err))\n//         } else {\n//             await geomanagementApi.post(`/provinces`, values).then((res) => {\n//                 props.history.push(\"/provinces\")\n//                 alert(res)\n//             })\n//                 .catch(err => alert(err))\n//         }\n//     }\n//     const getcountries = async (value) => {\n//         console.log('value :>> ', value);\n//         const params = {\n//             name: value\n//         }\n//         geomanagementApi.get(`/provinces`, { params: params }).then(res => {\n//             if (res.data.data) {\n//                 setCountries(res.data.data)\n//             }\n//             // setCountries(res.data.data)\n//         })\n//     }\n//     const options = countries.map(d => <Option key={d.id}>{d.localName}</Option>)\n//     return (\n//         <div>\n//             <Formik\n//                 validationSchema={validationSchema}\n//                 initialValues={initialValues}\n//                 onSubmit={submit}\n//                 enableReinitialize\n//             >\n//                 {({ errors, touched, setFieldValue }) => (\n//                     <Form>\n//                         <label htmlFor=\"countryId\">countryId</label>\n//                         <Field\n//                             name=\"countryId\"\n//                             render={({ field, form }) =>\n//                                 <Select\n//                                     {...field}\n//                                     showSearch\n//                                     value={form.values[\"countryId\"]}\n//                                     style={{ width: \"300px\" }}\n//                                     defaultActiveFirstOption={false}\n//                                     showArrow={false}\n//                                     filterOption={false}\n//                                     onSearch={getcountries}\n//                                     onChange={(value, option) =>\n//                                         form.setFieldValue(\"countryId\", value)\n//                                     }\n//                                     notFoundContent={null}\n//                                 >\n//                                     {options}\n//                                 </Select>\n//                             } />\n//                         {errors.countryId && touched.countryId ? (<div>{errors.countryId}</div>) : null}\n//                         <CommonField\n//                             errors={errors}\n//                             touched={touched}\n//                         />\n//                         <button type=\"submit\">Submit</button>\n//                     </Form>\n//                 )}\n//             </Formik>\n//         </div >\n//     );\n// }\n// export default withRouter(ProvinceForm);\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnFormItemSelect, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountriesForm(props) {\n  _s();\n\n  const [form] = PrvnUseForm();\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  const [countries, setCountries] = useState([]);\n  useEffect(async () => {\n    if (props.edit) {\n      onFill();\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const onFinish = async values => {\n    if (props.edit == true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res.data);\n      }).catch(err => alert(err));\n    } else {\n      await geomanagementApi.post(`/countries`, values).then(res => {\n        props.history.push(\"/countries\");\n        alert(res);\n      }).catch(err => alert(err));\n    }\n  };\n\n  const onFill = () => {\n    console.log('props.initialValues :>> ', props.initialValues);\n    const id = props.location.state && props.location.state.id;\n    geomanagementApi.get(\"/countries/\" + id).then(response => {\n      form.setFieldsValue(response.data.data);\n    });\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const getcountries = async value => {\n    console.log('value :>> ', value);\n    const params = {\n      name: value\n    };\n    geomanagementApi.get(`/provinces`, {\n      params: params\n    }).then(res => {\n      let arrayCountries = [];\n      console.log('res.data :>> ', res.data);\n\n      if (res.data.data) {\n        res.data.data.map(it => {\n          arrayCountries.push({\n            lable: `${it.localName} , ${it.enName} `,\n            data: it,\n            value: it.id\n          });\n        });\n      } // if (res.data.data) {\n      //     setCountries(res.data.data)\n      // }\n\n\n      setCountries(arrayCountries);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // <Select\n    //                                     {...field}\n    //                                     showSearch\n    //                                     value={form.values[\"countryId\"]}\n    //                                     style={{ width: \"300px\" }}\n    //                                     defaultActiveFirstOption={false}\n    //                                     showArrow={false}\n    //                                     filterOption={false}\n    //                                     onSearch={getcountries}\n    //                                     onChange={(value, option) =>\n    //                                         form.setFieldValue(\"countryId\", value)\n    //                                     }\n    //                                     notFoundContent={null}\n    //                                 >\n    //                                     {options}\n    //                                 </Select>\n    _jsxDEV(PrvnForm, {\n      form: form,\n      name: \"control-hooks\" // initialValues={initialValues}\n      ,\n      onFinish: onFinish,\n      children: [/*#__PURE__*/_jsxDEV(PrvnFormItemSelect, {\n        showSearch: true,\n        allowClear: true,\n        name: \"countryId\",\n        label: translator(\"countryId\"),\n        optionvalue: countries // selectFocus={getMissions}\n        ,\n        onSearch: getcountries // onPopupScroll={(e) => console.log(\"e\", e)}\n        ,\n        onSelect: (option, LabeledValue) => {\n          form.setFieldValue(\"countryId\", value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true\n        }],\n        name: \"enName\",\n        label: translator(\"enName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true\n        }],\n        name: \"localName\",\n        label: translator(\"localName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true\n        }],\n        name: \"otherName\",\n        label: translator(\"otherName\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItemInput, {\n        rules: [{\n          required: true\n        }],\n        name: \"shortCode\",\n        label: translator(\"shortCode\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PrvnFormItem, {\n        children: [/*#__PURE__*/_jsxDEV(PrvnButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PrvnButton, {\n          htmlType: \"Prvnbutton\",\n          onClick: onReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(CountriesForm, \"Um1MZ3EOtyMMH66/JQCoB4IcfZ0=\");\n\n_c = CountriesForm;\nexport default _c2 = withRouter(CountriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinceForm.js"],"names":["Formik","Form","Field","React","useEffect","useState","withRouter","Yup","PrvnButton","PrvnForm","PrvnFormItem","PrvnFormItemInput","PrvnFormItemSelect","PrvnUseForm","geomanagementApi","translator","CommonField","CountriesForm","props","form","initialValues","setInitialValues","count","seCount","countries","setCountries","edit","onFill","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","onFinish","values","put","id","then","res","history","push","alert","data","catch","err","post","console","log","location","state","get","response","setFieldsValue","onReset","resetFields","getcountries","value","params","name","arrayCountries","map","it","lable","option","LabeledValue","setFieldValue"],"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","sourcesContent":["// import { Formik, Form, Field } from 'formik';\n// import React, { useEffect, useState } from 'react';\n// import { withRouter } from 'react-router-dom';\n// import * as Yup from 'yup';\n// import { geomanagementApi } from '../../service/api';\n// import CommonField from '../CommonField';\n// import { PrvnSelect } from '../../component2/PrvnComponents';\n// import { Select } from 'antd';\n// const { Option } = Select;\n\n// function ProvinceForm(props) {\n//     const [initialValues, setInitialValues] = useState({})\n//     const [countries, setCountries] = useState([]);\n//     const [countrieLoading, setCountriesLoading] = useState(false);\n\n//     const [count, seCount] = useState(true)\n\n//     useEffect(async () => {\n//         if (props.edit) {\n//             const id = props.location.state && props.location.state.id\n//             geomanagementApi.get(\"/provinces/\" + id).then((res) => {\n//                 console.log('res.data.data :>> ', res.data.data);\n//                 setInitialValues(res.data.data)\n//             })\n//         }\n//     }, [])\n\n//     const validationSchema = Yup.object().shape({\n//         enName: Yup.string().required(\"required\"),\n//         localName: Yup.string().required(\"required\"),\n//         otherName: Yup.string().required(\"required\"),\n//         shortCode: Yup.string().required(\"required\"),\n//     });\n\n//     const submit = async (values) => {\n//         console.log('values :>> ', values);\n//         if (props.edit == true) {\n//             await geomanagementApi.put(`/provinces/${values.id}`, values).then((res) => {\n//                 alert(res)\n//                 props.history.push(\"/provinces\")\n//             })\n//                 .catch(err => alert(err))\n//         } else {\n//             await geomanagementApi.post(`/provinces`, values).then((res) => {\n//                 props.history.push(\"/provinces\")\n//                 alert(res)\n//             })\n//                 .catch(err => alert(err))\n//         }\n//     }\n\n\n//     const getcountries = async (value) => {\n//         console.log('value :>> ', value);\n//         const params = {\n//             name: value\n//         }\n//         geomanagementApi.get(`/provinces`, { params: params }).then(res => {\n//             if (res.data.data) {\n//                 setCountries(res.data.data)\n//             }\n//             // setCountries(res.data.data)\n//         })\n\n//     }\n//     const options = countries.map(d => <Option key={d.id}>{d.localName}</Option>)\n\n//     return (\n//         <div>\n//             <Formik\n//                 validationSchema={validationSchema}\n//                 initialValues={initialValues}\n//                 onSubmit={submit}\n//                 enableReinitialize\n//             >\n//                 {({ errors, touched, setFieldValue }) => (\n//                     <Form>\n//                         <label htmlFor=\"countryId\">countryId</label>\n//                         <Field\n//                             name=\"countryId\"\n//                             render={({ field, form }) =>\n//                                 <Select\n//                                     {...field}\n//                                     showSearch\n//                                     value={form.values[\"countryId\"]}\n//                                     style={{ width: \"300px\" }}\n//                                     defaultActiveFirstOption={false}\n//                                     showArrow={false}\n//                                     filterOption={false}\n//                                     onSearch={getcountries}\n//                                     onChange={(value, option) =>\n//                                         form.setFieldValue(\"countryId\", value)\n//                                     }\n//                                     notFoundContent={null}\n//                                 >\n//                                     {options}\n//                                 </Select>\n\n//                             } />\n//                         {errors.countryId && touched.countryId ? (<div>{errors.countryId}</div>) : null}\n//                         <CommonField\n//                             errors={errors}\n//                             touched={touched}\n//                         />\n//                         <button type=\"submit\">Submit</button>\n//                     </Form>\n//                 )}\n//             </Formik>\n//         </div >\n//     );\n// }\n\n// export default withRouter(ProvinceForm);\nimport { Formik, Form, Field } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { PrvnButton, PrvnForm, PrvnFormItem, PrvnFormItemInput, PrvnFormItemSelect, PrvnUseForm } from '../../component2/PrvnComponents';\nimport { geomanagementApi } from '../../service/api';\nimport translator from '../../Translator/translator';\nimport CommonField from '../CommonField';\n\nfunction CountriesForm(props) {\n    const [form] = PrvnUseForm()\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n    const [countries, setCountries] = useState([]);\n\n\n    useEffect(async () => {\n        if (props.edit) {\n            onFill()\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const onFinish = async (values) => {\n        if (props.edit == true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res.data)\n            }).catch(err => alert(err))\n        } else {\n            await geomanagementApi.post(`/countries`, values).then((res) => {\n                props.history.push(\"/countries\")\n                alert(res)\n            }).catch(err => alert(err))\n        }\n    }\n\n    const onFill = () => {\n        console.log('props.initialValues :>> ', props.initialValues);\n        const id = props.location.state && props.location.state.id\n        geomanagementApi.get(\"/countries/\" + id).then((response) => {\n\n            form.setFieldsValue(response.data.data)\n        })\n\n    };\n    const onReset = () => {\n        form.resetFields();\n    };\n\n    const getcountries = async (value) => {\n        console.log('value :>> ', value);\n        const params = {\n            name: value\n        }\n        geomanagementApi.get(`/provinces`, { params: params }).then(res => {\n            let arrayCountries = []\n            console.log('res.data :>> ', res.data);\n            if (res.data.data) {\n                res.data.data.map((it) => {\n                    arrayCountries.push({\n                        lable: `${it.localName} , ${it.enName} `,\n                        data: it,\n                        value: it.id\n                    })\n                })\n            }\n\n            // if (res.data.data) {\n            //     setCountries(res.data.data)\n            // }\n            setCountries(arrayCountries)\n        })\n\n    }\n    return (\n\n        // <Select\n        //                                     {...field}\n        //                                     showSearch\n        //                                     value={form.values[\"countryId\"]}\n        //                                     style={{ width: \"300px\" }}\n        //                                     defaultActiveFirstOption={false}\n        //                                     showArrow={false}\n        //                                     filterOption={false}\n        //                                     onSearch={getcountries}\n        //                                     onChange={(value, option) =>\n        //                                         form.setFieldValue(\"countryId\", value)\n        //                                     }\n        //                                     notFoundContent={null}\n        //                                 >\n        //                                     {options}\n        //                                 </Select>\n\n\n        <PrvnForm\n            form={form}\n            name=\"control-hooks\"\n            // initialValues={initialValues}\n            onFinish={onFinish}>\n\n            <PrvnFormItemSelect\n                showSearch\n                allowClear={true}\n                name={\"countryId\"}\n                label={translator(\"countryId\")}\n                optionvalue={countries}\n                // selectFocus={getMissions}\n                onSearch={getcountries}\n                // onPopupScroll={(e) => console.log(\"e\", e)}\n                onSelect={(option, LabeledValue) => {\n                    form.setFieldValue(\"countryId\", value)\n                }}\n            />\n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"enName\"\n                label={translator(\"enName\")}\n            />\n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"localName\"\n                label={translator(\"localName\")}\n            />\n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"otherName\"\n                label={translator(\"otherName\")}\n            />\n            <PrvnFormItemInput\n                rules={[{ required: true }]}\n                name=\"shortCode\"\n                label={translator(\"shortCode\")}\n            />\n            <PrvnFormItem >\n\n                <PrvnButton type=\"primary\" htmlType=\"submit\">\n                    Submit\n                 </PrvnButton>\n\n                <PrvnButton htmlType=\"Prvnbutton\" onClick={onReset}>\n                    Reset\n            </PrvnButton>\n\n            </PrvnFormItem>\n        </PrvnForm >\n\n    );\n}\n\nexport default withRouter(CountriesForm);"]},"metadata":{},"sourceType":"module"}