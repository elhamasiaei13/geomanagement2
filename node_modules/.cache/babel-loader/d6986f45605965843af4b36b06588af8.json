{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nimport authUtil from './authUtil';\nconst BASE_URL = process.env.REACT_APP_REPORT_BACKEND_FE_BASE_UR;\nconst PORT = process.env.REACT_APP_REPORT_BACKEND_FE_PORT;\nconst ACCESS_TOKEN = localStorage.getItem(\"access_token\");\nconst BEARER_TOKEN = 'Bearer '.concat(ACCESS_TOKEN); // --------------------------EXPENSE-API --------------------------\n\n_c = BEARER_TOKEN;\nconst geomanagementApi = axios.create({\n  // baseURL: `http://${BASE_URL}${PORT}/expense/v1`\n  baseURL: `/geomanagement/v1/`\n});\ngeomanagementApi.interceptors.request.use(config => {\n  // config.headers[\"Authorization\"] = BEARER_TOKEN;\n  // config.headers[\"user_name\"] = authUtil.parseJwt(ACCESS_TOKEN).user_name;\n  // config.headers[\"ip\"] = \"123\";\n  return config;\n});\ngeomanagementApi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  handleError(error);\n  return Promise.reject(error);\n});\n\nconst handleError = error => {\n  if (error.response) {\n    if (error.response.status === 401) {\n      authUtil.logout();\n    } else if (error.response.status === 503) {// message.error(\"503 - Service Unavailable\", 2);\n      // authUtil.redirectToPreLocation();\n    } //TODO: Handle Other statuses. . .\n\n  } else {\n    message.error(error.message, 60);\n  }\n};\n\nexport { geomanagementApi };\n\nvar _c;\n\n$RefreshReg$(_c, \"BEARER_TOKEN\");","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/service/api.js"],"names":["axios","message","authUtil","BASE_URL","process","env","REACT_APP_REPORT_BACKEND_FE_BASE_UR","PORT","REACT_APP_REPORT_BACKEND_FE_PORT","ACCESS_TOKEN","localStorage","getItem","BEARER_TOKEN","concat","geomanagementApi","create","baseURL","interceptors","request","use","config","response","error","handleError","Promise","reject","status","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,mCAA7B;AACA,MAAMC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,gCAAzB;AAEA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;AACA,MAAMC,YAAY,GAAG,UAAUC,MAAV,CAAiBJ,YAAjB,CAArB,C,CAGA;;KAHMG,Y;AAKN,MAAME,gBAAgB,GAAGd,KAAK,CAACe,MAAN,CAAa;AAClC;AACAC,EAAAA,OAAO,EAAG;AAFwB,CAAb,CAAzB;AAMAF,gBAAgB,CAACG,YAAjB,CAA8BC,OAA9B,CAAsCC,GAAtC,CAA0CC,MAAM,IAAI;AAChD;AACA;AACA;AACA,SAAOA,MAAP;AACH,CALD;AAOAN,gBAAgB,CAACG,YAAjB,CAA8BI,QAA9B,CAAuCF,GAAvC,CAA2CE,QAAQ,IAAI;AACnD,SAAOA,QAAP;AACH,CAFD,EAEGC,KAAK,IAAI;AACRC,EAAAA,WAAW,CAACD,KAAD,CAAX;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACH,CALD;;AAUA,MAAMC,WAAW,GAAID,KAAD,IAAW;AAC3B,MAAIA,KAAK,CAACD,QAAV,EAAoB;AAChB,QAAIC,KAAK,CAACD,QAAN,CAAeK,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxB,MAAAA,QAAQ,CAACyB,MAAT;AACH,KAFD,MAEO,IAAIL,KAAK,CAACD,QAAN,CAAeK,MAAf,KAA0B,GAA9B,EAAmC,CACtC;AACA;AACH,KANe,CAOhB;;AACH,GARD,MAQO;AAEHzB,IAAAA,OAAO,CAACqB,KAAR,CAAcA,KAAK,CAACrB,OAApB,EAA6B,EAA7B;AACH;AACJ,CAbD;;AAgBA,SACIa,gBADJ","sourcesContent":["import axios from 'axios';\nimport { message } from 'antd';\nimport authUtil from './authUtil';\n\nconst BASE_URL = process.env.REACT_APP_REPORT_BACKEND_FE_BASE_UR;\nconst PORT = process.env.REACT_APP_REPORT_BACKEND_FE_PORT;\n\nconst ACCESS_TOKEN = localStorage.getItem(\"access_token\");\nconst BEARER_TOKEN = 'Bearer '.concat(ACCESS_TOKEN);\n\n\n// --------------------------EXPENSE-API --------------------------\n\nconst geomanagementApi = axios.create({\n    // baseURL: `http://${BASE_URL}${PORT}/expense/v1`\n    baseURL: `/geomanagement/v1/`\n\n});\n\ngeomanagementApi.interceptors.request.use(config => {\n    // config.headers[\"Authorization\"] = BEARER_TOKEN;\n    // config.headers[\"user_name\"] = authUtil.parseJwt(ACCESS_TOKEN).user_name;\n    // config.headers[\"ip\"] = \"123\";\n    return config\n});\n\ngeomanagementApi.interceptors.response.use(response => {\n    return response;\n}, error => {\n    handleError(error);\n    return Promise.reject(error);\n});\n\n\n\n\nconst handleError = (error) => {\n    if (error.response) {\n        if (error.response.status === 401) {\n            authUtil.logout();\n        } else if (error.response.status === 503) {\n            // message.error(\"503 - Service Unavailable\", 2);\n            // authUtil.redirectToPreLocation();\n        }\n        //TODO: Handle Other statuses. . .\n    } else {\n\n        message.error(error.message, 60);\n    }\n}\n\n\nexport {\n    geomanagementApi\n};"]},"metadata":{},"sourceType":"module"}