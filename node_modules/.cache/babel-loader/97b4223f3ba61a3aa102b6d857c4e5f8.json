{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinseForm.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction provinceForm(props) {\n  _s();\n\n  const [initialValues, setInitialValues] = useState({});\n  const [count, seCount] = useState(true);\n  useEffect(async () => {\n    if (props.edit) {\n      const id = props.location.state && props.location.state.id;\n      geomanagementApi.get(\"/province/\" + id).then(res => {\n        console.log('res.data.data :>> ', res.data.data);\n        setInitialValues(res.data.data);\n      });\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    enName: Yup.string().required(\"required\"),\n    localName: Yup.string().required(\"required\"),\n    otherName: Yup.string().required(\"required\"),\n    shortCode: Yup.string().required(\"required\")\n  });\n\n  const submit = async values => {\n    if (props.edit = true) {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    } else {\n      await geomanagementApi.put(`/countries/${values.id}`, values).then(res => alert(res)).catch(err => alert(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log('props  countries >> ', props), /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: validationSchema,\n      initialValues: initialValues,\n      onSubmit: submit,\n      enableReinitialize: true,\n      children: ({\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(CommonField, {\n          errors: errors,\n          touched: touched\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(provinceForm, \"KBY71AgJEE6onhJmrYTSshyGgzM=\");\n\nexport default withRouter(provinceForm);","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/geomanagement2-fe/src/components/pages/ProvinseForm.js"],"names":["Formik","Form","React","useEffect","useState","withRouter","Yup","geomanagementApi","CommonField","provinceForm","props","initialValues","setInitialValues","count","seCount","edit","id","location","state","get","then","res","console","log","data","validationSchema","object","shape","enName","string","required","localName","otherName","shortCode","submit","values","put","alert","catch","err","errors","touched"],"mappings":"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","sourcesContent":["import { Formik, Form } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { geomanagementApi } from '../../service/api';\nimport CommonField from '../CommonField';\n\nfunction provinceForm(props) {\n    const [initialValues, setInitialValues] = useState({})\n    const [count, seCount] = useState(true)\n\n    useEffect(async () => {\n        if (props.edit) {\n            const id = props.location.state && props.location.state.id\n            geomanagementApi.get(\"/province/\" + id).then((res) => {\n                console.log('res.data.data :>> ', res.data.data);\n                setInitialValues(res.data.data)\n            })\n        }\n    }, [])\n\n    const validationSchema = Yup.object().shape({\n        enName: Yup.string().required(\"required\"),\n        localName: Yup.string().required(\"required\"),\n        otherName: Yup.string().required(\"required\"),\n        shortCode: Yup.string().required(\"required\"),\n    });\n\n    const submit = async (values) => {\n        if (props.edit = true) {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        } else {\n            await geomanagementApi.put(`/countries/${values.id}`, values).then((res) => alert(res))\n                .catch(err => alert(err))\n        }\n    }\n\n    return (\n        <div>\n            {console.log('props  countries >> ', props)}\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={initialValues}\n                onSubmit={submit}\n                enableReinitialize\n            >\n                {({ errors, touched }) => (\n                    <Form>\n                        <CommonField\n                            errors={errors}\n                            touched={touched}\n                        />\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n            </Formik>\n        </div >\n    );\n}\n\nexport default withRouter(provinceForm);"]},"metadata":{},"sourceType":"module"}